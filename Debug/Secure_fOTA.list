
Secure_fOTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed8  08003ed8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ee0  08003ee0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ee4  08003ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000088  08003f6c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08003f6c  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e8c  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c95  00000000  00000000  00028f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002abd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002b490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c33  00000000  00000000  0002bc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a363  00000000  00000000  000438bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084076  00000000  00000000  0004dc1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1c94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d8  00000000  00000000  000d1ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bec 	.word	0x08003bec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003bec 	.word	0x08003bec

0800014c <__aeabi_uldivmod>:
 800014c:	b953      	cbnz	r3, 8000164 <__aeabi_uldivmod+0x18>
 800014e:	b94a      	cbnz	r2, 8000164 <__aeabi_uldivmod+0x18>
 8000150:	2900      	cmp	r1, #0
 8000152:	bf08      	it	eq
 8000154:	2800      	cmpeq	r0, #0
 8000156:	bf1c      	itt	ne
 8000158:	f04f 31ff 	movne.w	r1, #4294967295
 800015c:	f04f 30ff 	movne.w	r0, #4294967295
 8000160:	f000 b976 	b.w	8000450 <__aeabi_idiv0>
 8000164:	f1ad 0c08 	sub.w	ip, sp, #8
 8000168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800016c:	f000 f806 	bl	800017c <__udivmoddi4>
 8000170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000178:	b004      	add	sp, #16
 800017a:	4770      	bx	lr

0800017c <__udivmoddi4>:
 800017c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000180:	9e08      	ldr	r6, [sp, #32]
 8000182:	460d      	mov	r5, r1
 8000184:	4604      	mov	r4, r0
 8000186:	4688      	mov	r8, r1
 8000188:	2b00      	cmp	r3, #0
 800018a:	d14d      	bne.n	8000228 <__udivmoddi4+0xac>
 800018c:	428a      	cmp	r2, r1
 800018e:	4694      	mov	ip, r2
 8000190:	d968      	bls.n	8000264 <__udivmoddi4+0xe8>
 8000192:	fab2 f282 	clz	r2, r2
 8000196:	b152      	cbz	r2, 80001ae <__udivmoddi4+0x32>
 8000198:	fa01 f302 	lsl.w	r3, r1, r2
 800019c:	f1c2 0120 	rsb	r1, r2, #32
 80001a0:	fa20 f101 	lsr.w	r1, r0, r1
 80001a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001a8:	ea41 0803 	orr.w	r8, r1, r3
 80001ac:	4094      	lsls	r4, r2
 80001ae:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001b2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001b6:	fa1f fe8c 	uxth.w	lr, ip
 80001ba:	fb01 8817 	mls	r8, r1, r7, r8
 80001be:	fb07 f00e 	mul.w	r0, r7, lr
 80001c2:	0c23      	lsrs	r3, r4, #16
 80001c4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001c8:	4298      	cmp	r0, r3
 80001ca:	d90a      	bls.n	80001e2 <__udivmoddi4+0x66>
 80001cc:	eb1c 0303 	adds.w	r3, ip, r3
 80001d0:	f107 35ff 	add.w	r5, r7, #4294967295
 80001d4:	f080 811e 	bcs.w	8000414 <__udivmoddi4+0x298>
 80001d8:	4298      	cmp	r0, r3
 80001da:	f240 811b 	bls.w	8000414 <__udivmoddi4+0x298>
 80001de:	3f02      	subs	r7, #2
 80001e0:	4463      	add	r3, ip
 80001e2:	1a1b      	subs	r3, r3, r0
 80001e4:	fbb3 f0f1 	udiv	r0, r3, r1
 80001e8:	fb01 3310 	mls	r3, r1, r0, r3
 80001ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80001f0:	b2a4      	uxth	r4, r4
 80001f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80001f6:	45a6      	cmp	lr, r4
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x94>
 80001fa:	eb1c 0404 	adds.w	r4, ip, r4
 80001fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000202:	f080 8109 	bcs.w	8000418 <__udivmoddi4+0x29c>
 8000206:	45a6      	cmp	lr, r4
 8000208:	f240 8106 	bls.w	8000418 <__udivmoddi4+0x29c>
 800020c:	4464      	add	r4, ip
 800020e:	3802      	subs	r0, #2
 8000210:	2100      	movs	r1, #0
 8000212:	eba4 040e 	sub.w	r4, r4, lr
 8000216:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800021a:	b11e      	cbz	r6, 8000224 <__udivmoddi4+0xa8>
 800021c:	2300      	movs	r3, #0
 800021e:	40d4      	lsrs	r4, r2
 8000220:	e9c6 4300 	strd	r4, r3, [r6]
 8000224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000228:	428b      	cmp	r3, r1
 800022a:	d908      	bls.n	800023e <__udivmoddi4+0xc2>
 800022c:	2e00      	cmp	r6, #0
 800022e:	f000 80ee 	beq.w	800040e <__udivmoddi4+0x292>
 8000232:	2100      	movs	r1, #0
 8000234:	e9c6 0500 	strd	r0, r5, [r6]
 8000238:	4608      	mov	r0, r1
 800023a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023e:	fab3 f183 	clz	r1, r3
 8000242:	2900      	cmp	r1, #0
 8000244:	d14a      	bne.n	80002dc <__udivmoddi4+0x160>
 8000246:	42ab      	cmp	r3, r5
 8000248:	d302      	bcc.n	8000250 <__udivmoddi4+0xd4>
 800024a:	4282      	cmp	r2, r0
 800024c:	f200 80fc 	bhi.w	8000448 <__udivmoddi4+0x2cc>
 8000250:	1a84      	subs	r4, r0, r2
 8000252:	eb65 0303 	sbc.w	r3, r5, r3
 8000256:	2001      	movs	r0, #1
 8000258:	4698      	mov	r8, r3
 800025a:	2e00      	cmp	r6, #0
 800025c:	d0e2      	beq.n	8000224 <__udivmoddi4+0xa8>
 800025e:	e9c6 4800 	strd	r4, r8, [r6]
 8000262:	e7df      	b.n	8000224 <__udivmoddi4+0xa8>
 8000264:	b902      	cbnz	r2, 8000268 <__udivmoddi4+0xec>
 8000266:	deff      	udf	#255	; 0xff
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	2a00      	cmp	r2, #0
 800026e:	f040 8091 	bne.w	8000394 <__udivmoddi4+0x218>
 8000272:	eba1 000c 	sub.w	r0, r1, ip
 8000276:	2101      	movs	r1, #1
 8000278:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027c:	fa1f fe8c 	uxth.w	lr, ip
 8000280:	fbb0 f3f7 	udiv	r3, r0, r7
 8000284:	fb07 0013 	mls	r0, r7, r3, r0
 8000288:	0c25      	lsrs	r5, r4, #16
 800028a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800028e:	fb0e f003 	mul.w	r0, lr, r3
 8000292:	42a8      	cmp	r0, r5
 8000294:	d908      	bls.n	80002a8 <__udivmoddi4+0x12c>
 8000296:	eb1c 0505 	adds.w	r5, ip, r5
 800029a:	f103 38ff 	add.w	r8, r3, #4294967295
 800029e:	d202      	bcs.n	80002a6 <__udivmoddi4+0x12a>
 80002a0:	42a8      	cmp	r0, r5
 80002a2:	f200 80ce 	bhi.w	8000442 <__udivmoddi4+0x2c6>
 80002a6:	4643      	mov	r3, r8
 80002a8:	1a2d      	subs	r5, r5, r0
 80002aa:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ae:	fb07 5510 	mls	r5, r7, r0, r5
 80002b2:	fb0e fe00 	mul.w	lr, lr, r0
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x156>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x154>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f200 80b6 	bhi.w	800043c <__udivmoddi4+0x2c0>
 80002d0:	4628      	mov	r0, r5
 80002d2:	eba4 040e 	sub.w	r4, r4, lr
 80002d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002da:	e79e      	b.n	800021a <__udivmoddi4+0x9e>
 80002dc:	f1c1 0720 	rsb	r7, r1, #32
 80002e0:	408b      	lsls	r3, r1
 80002e2:	fa22 fc07 	lsr.w	ip, r2, r7
 80002e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80002ea:	fa25 fa07 	lsr.w	sl, r5, r7
 80002ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f2:	fbba f8f9 	udiv	r8, sl, r9
 80002f6:	fa20 f307 	lsr.w	r3, r0, r7
 80002fa:	fb09 aa18 	mls	sl, r9, r8, sl
 80002fe:	408d      	lsls	r5, r1
 8000300:	fa1f fe8c 	uxth.w	lr, ip
 8000304:	431d      	orrs	r5, r3
 8000306:	fa00 f301 	lsl.w	r3, r0, r1
 800030a:	fb08 f00e 	mul.w	r0, r8, lr
 800030e:	0c2c      	lsrs	r4, r5, #16
 8000310:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000314:	42a0      	cmp	r0, r4
 8000316:	fa02 f201 	lsl.w	r2, r2, r1
 800031a:	d90b      	bls.n	8000334 <__udivmoddi4+0x1b8>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f108 3aff 	add.w	sl, r8, #4294967295
 8000324:	f080 8088 	bcs.w	8000438 <__udivmoddi4+0x2bc>
 8000328:	42a0      	cmp	r0, r4
 800032a:	f240 8085 	bls.w	8000438 <__udivmoddi4+0x2bc>
 800032e:	f1a8 0802 	sub.w	r8, r8, #2
 8000332:	4464      	add	r4, ip
 8000334:	1a24      	subs	r4, r4, r0
 8000336:	fbb4 f0f9 	udiv	r0, r4, r9
 800033a:	fb09 4410 	mls	r4, r9, r0, r4
 800033e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000342:	b2ad      	uxth	r5, r5
 8000344:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x1e2>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 35ff 	add.w	r5, r0, #4294967295
 8000354:	d26c      	bcs.n	8000430 <__udivmoddi4+0x2b4>
 8000356:	45a6      	cmp	lr, r4
 8000358:	d96a      	bls.n	8000430 <__udivmoddi4+0x2b4>
 800035a:	3802      	subs	r0, #2
 800035c:	4464      	add	r4, ip
 800035e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000362:	fba0 9502 	umull	r9, r5, r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	42ac      	cmp	r4, r5
 800036c:	46c8      	mov	r8, r9
 800036e:	46ae      	mov	lr, r5
 8000370:	d356      	bcc.n	8000420 <__udivmoddi4+0x2a4>
 8000372:	d053      	beq.n	800041c <__udivmoddi4+0x2a0>
 8000374:	2e00      	cmp	r6, #0
 8000376:	d069      	beq.n	800044c <__udivmoddi4+0x2d0>
 8000378:	ebb3 0208 	subs.w	r2, r3, r8
 800037c:	eb64 040e 	sbc.w	r4, r4, lr
 8000380:	fa22 f301 	lsr.w	r3, r2, r1
 8000384:	fa04 f707 	lsl.w	r7, r4, r7
 8000388:	431f      	orrs	r7, r3
 800038a:	40cc      	lsrs	r4, r1
 800038c:	e9c6 7400 	strd	r7, r4, [r6]
 8000390:	2100      	movs	r1, #0
 8000392:	e747      	b.n	8000224 <__udivmoddi4+0xa8>
 8000394:	fa0c fc02 	lsl.w	ip, ip, r2
 8000398:	f1c2 0120 	rsb	r1, r2, #32
 800039c:	fa25 f301 	lsr.w	r3, r5, r1
 80003a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a4:	fa20 f101 	lsr.w	r1, r0, r1
 80003a8:	4095      	lsls	r5, r2
 80003aa:	430d      	orrs	r5, r1
 80003ac:	fbb3 f1f7 	udiv	r1, r3, r7
 80003b0:	fb07 3311 	mls	r3, r7, r1, r3
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	0c28      	lsrs	r0, r5, #16
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	fb01 f30e 	mul.w	r3, r1, lr
 80003c2:	4283      	cmp	r3, r0
 80003c4:	fa04 f402 	lsl.w	r4, r4, r2
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x260>
 80003ca:	eb1c 0000 	adds.w	r0, ip, r0
 80003ce:	f101 38ff 	add.w	r8, r1, #4294967295
 80003d2:	d22f      	bcs.n	8000434 <__udivmoddi4+0x2b8>
 80003d4:	4283      	cmp	r3, r0
 80003d6:	d92d      	bls.n	8000434 <__udivmoddi4+0x2b8>
 80003d8:	3902      	subs	r1, #2
 80003da:	4460      	add	r0, ip
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	fbb0 f3f7 	udiv	r3, r0, r7
 80003e2:	fb07 0013 	mls	r0, r7, r3, r0
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003ec:	fb03 f00e 	mul.w	r0, r3, lr
 80003f0:	42a8      	cmp	r0, r5
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x28a>
 80003f4:	eb1c 0505 	adds.w	r5, ip, r5
 80003f8:	f103 38ff 	add.w	r8, r3, #4294967295
 80003fc:	d216      	bcs.n	800042c <__udivmoddi4+0x2b0>
 80003fe:	42a8      	cmp	r0, r5
 8000400:	d914      	bls.n	800042c <__udivmoddi4+0x2b0>
 8000402:	3b02      	subs	r3, #2
 8000404:	4465      	add	r5, ip
 8000406:	1a28      	subs	r0, r5, r0
 8000408:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040c:	e738      	b.n	8000280 <__udivmoddi4+0x104>
 800040e:	4631      	mov	r1, r6
 8000410:	4630      	mov	r0, r6
 8000412:	e707      	b.n	8000224 <__udivmoddi4+0xa8>
 8000414:	462f      	mov	r7, r5
 8000416:	e6e4      	b.n	80001e2 <__udivmoddi4+0x66>
 8000418:	4618      	mov	r0, r3
 800041a:	e6f9      	b.n	8000210 <__udivmoddi4+0x94>
 800041c:	454b      	cmp	r3, r9
 800041e:	d2a9      	bcs.n	8000374 <__udivmoddi4+0x1f8>
 8000420:	ebb9 0802 	subs.w	r8, r9, r2
 8000424:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000428:	3801      	subs	r0, #1
 800042a:	e7a3      	b.n	8000374 <__udivmoddi4+0x1f8>
 800042c:	4643      	mov	r3, r8
 800042e:	e7ea      	b.n	8000406 <__udivmoddi4+0x28a>
 8000430:	4628      	mov	r0, r5
 8000432:	e794      	b.n	800035e <__udivmoddi4+0x1e2>
 8000434:	4641      	mov	r1, r8
 8000436:	e7d1      	b.n	80003dc <__udivmoddi4+0x260>
 8000438:	46d0      	mov	r8, sl
 800043a:	e77b      	b.n	8000334 <__udivmoddi4+0x1b8>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	e747      	b.n	80002d2 <__udivmoddi4+0x156>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	e72f      	b.n	80002a8 <__udivmoddi4+0x12c>
 8000448:	4608      	mov	r0, r1
 800044a:	e706      	b.n	800025a <__udivmoddi4+0xde>
 800044c:	4631      	mov	r1, r6
 800044e:	e6e9      	b.n	8000224 <__udivmoddi4+0xa8>

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop

08000454 <hmac_sha1>:
#include "hmac.h"

/* function doing the HMAC-SHA-1 calculation */
void hmac_sha1(const uint8_t* key, const uint32_t keysize, const uint8_t* msg, const uint32_t msgsize, uint8_t* output)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b0b6      	sub	sp, #216	; 0xd8
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	603b      	str	r3, [r7, #0]
  struct sha1 outer, inner;
  uint8_t tmp;

  sha1_reset(&outer);
 8000462:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fd6e 	bl	8000f48 <sha1_reset>
  sha1_reset(&inner);
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fd69 	bl	8000f48 <sha1_reset>

  uint32_t i;
  for (i = 0; i < keysize; ++i)
 8000476:	2300      	movs	r3, #0
 8000478:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800047c:	e026      	b.n	80004cc <hmac_sha1+0x78>
  {
    tmp = key[i] ^ 0x5C;
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000484:	4413      	add	r3, r2
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f083 035c 	eor.w	r3, r3, #92	; 0x5c
 800048c:	b2db      	uxtb	r3, r3
 800048e:	74fb      	strb	r3, [r7, #19]
    sha1_input(&outer, &tmp, 1);
 8000490:	f107 0113 	add.w	r1, r7, #19
 8000494:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000498:	2201      	movs	r2, #1
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fde7 	bl	800106e <sha1_input>
    tmp = key[i] ^ 0x36;
 80004a0:	68fa      	ldr	r2, [r7, #12]
 80004a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80004a6:	4413      	add	r3, r2
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	74fb      	strb	r3, [r7, #19]
    sha1_input(&inner, &tmp, 1);
 80004b2:	f107 0113 	add.w	r1, r7, #19
 80004b6:	f107 0314 	add.w	r3, r7, #20
 80004ba:	2201      	movs	r2, #1
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 fdd6 	bl	800106e <sha1_input>
  for (i = 0; i < keysize; ++i)
 80004c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80004c6:	3301      	adds	r3, #1
 80004c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80004cc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d3d3      	bcc.n	800047e <hmac_sha1+0x2a>
  }
  for (; i < 64; ++i)
 80004d6:	e018      	b.n	800050a <hmac_sha1+0xb6>
  {
    tmp = 0x5C;
 80004d8:	235c      	movs	r3, #92	; 0x5c
 80004da:	74fb      	strb	r3, [r7, #19]
    sha1_input(&outer, &tmp, 1);
 80004dc:	f107 0113 	add.w	r1, r7, #19
 80004e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80004e4:	2201      	movs	r2, #1
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 fdc1 	bl	800106e <sha1_input>
    tmp = 0x36;
 80004ec:	2336      	movs	r3, #54	; 0x36
 80004ee:	74fb      	strb	r3, [r7, #19]
    sha1_input(&inner, &tmp, 1);
 80004f0:	f107 0113 	add.w	r1, r7, #19
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	2201      	movs	r2, #1
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fdb7 	bl	800106e <sha1_input>
  for (; i < 64; ++i)
 8000500:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000504:	3301      	adds	r3, #1
 8000506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800050a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800050e:	2b3f      	cmp	r3, #63	; 0x3f
 8000510:	d9e2      	bls.n	80004d8 <hmac_sha1+0x84>
  }

  sha1_input(&inner, msg, msgsize);
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	6879      	ldr	r1, [r7, #4]
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fda7 	bl	800106e <sha1_input>
  sha1_result(&inner, output);
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8000528:	4618      	mov	r0, r3
 800052a:	f000 fd43 	bl	8000fb4 <sha1_result>

  sha1_input(&outer, output, HMAC_SHA1_HASH_SIZE);
 800052e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000532:	2214      	movs	r2, #20
 8000534:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fd98 	bl	800106e <sha1_input>
  sha1_result(&outer, output);
 800053e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000542:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fd34 	bl	8000fb4 <sha1_result>
}
 800054c:	bf00      	nop
 800054e:	37d8      	adds	r7, #216	; 0xd8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000558:	f3bf 8f4f 	dsb	sy
}
 800055c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__NVIC_SystemReset+0x24>)
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000566:	4904      	ldr	r1, [pc, #16]	; (8000578 <__NVIC_SystemReset+0x24>)
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <__NVIC_SystemReset+0x28>)
 800056a:	4313      	orrs	r3, r2
 800056c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800056e:	f3bf 8f4f 	dsb	sy
}
 8000572:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <__NVIC_SystemReset+0x20>
 8000578:	e000ed00 	.word	0xe000ed00
 800057c:	05fa0004 	.word	0x05fa0004

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	b091      	sub	sp, #68	; 0x44
 8000584:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f001 fa59 	bl	8001a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f8f5 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f95f 	bl	8000850 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000592:	f000 f933 	bl	80007fc <MX_USART3_UART_Init>
  /* USER CODE BEGIN WHILE */


   // Calculate the required size for the uint8_t array

   HAL_FLASH_Unlock();
 8000596:	f001 fc2b 	bl	8001df0 <HAL_FLASH_Unlock>
   FLASH_EraseInitTypeDef EraseInitStruct;
   uint32_t SectorError;
   EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
   EraseInitStruct.PageAddress   = APP_START_ADDRESS;
 800059e:	4b5c      	ldr	r3, [pc, #368]	; (8000710 <main+0x190>)
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
   EraseInitStruct.NbPages       = 5;
 80005a2:	2305      	movs	r3, #5
 80005a4:	62bb      	str	r3, [r7, #40]	; 0x28
   generate_rsa_key_pair(&public_key, &private_key, &modulus);
 80005a6:	4a5b      	ldr	r2, [pc, #364]	; (8000714 <main+0x194>)
 80005a8:	495b      	ldr	r1, [pc, #364]	; (8000718 <main+0x198>)
 80005aa:	485c      	ldr	r0, [pc, #368]	; (800071c <main+0x19c>)
 80005ac:	f000 fc00 	bl	8000db0 <generate_rsa_key_pair>

  if (Wait_OTA_Request() == 1)
 80005b0:	f000 fa68 	bl	8000a84 <Wait_OTA_Request>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d172      	bne.n	80006a0 <main+0x120>
   {

       HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80005ba:	f107 0218 	add.w	r2, r7, #24
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	4611      	mov	r1, r2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fcfb 	bl	8001fc0 <HAL_FLASHEx_Erase>

	   OTA_Update();
 80005ca:	f000 f9a3 	bl	8000914 <OTA_Update>

	   Nloop = 0 ;
 80005ce:	4b54      	ldr	r3, [pc, #336]	; (8000720 <main+0x1a0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	   Receive_Signature();
 80005d4:	f000 fabe 	bl	8000b54 <Receive_Signature>
	   // Calculate the required size for the uint8_t array



	   convertByteArrayToUInt64Array(Signature_KBUF , Real_SIGNATURE );
 80005d8:	4952      	ldr	r1, [pc, #328]	; (8000724 <main+0x1a4>)
 80005da:	4853      	ldr	r0, [pc, #332]	; (8000728 <main+0x1a8>)
 80005dc:	f000 fc6c 	bl	8000eb8 <convertByteArrayToUInt64Array>
	   rsa_decrypt(Real_SIGNATURE, len, public_key, modulus, decrypted_SIGNATURE);      /* decrypt signature and extract HASH1 */
 80005e0:	4b52      	ldr	r3, [pc, #328]	; (800072c <main+0x1ac>)
 80005e2:	681e      	ldr	r6, [r3, #0]
 80005e4:	4b4d      	ldr	r3, [pc, #308]	; (800071c <main+0x19c>)
 80005e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80005ea:	4b4a      	ldr	r3, [pc, #296]	; (8000714 <main+0x194>)
 80005ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005f0:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8000730 <main+0x1b0>
 80005f4:	f8cd c008 	str.w	ip, [sp, #8]
 80005f8:	e9cd 2300 	strd	r2, r3, [sp]
 80005fc:	4602      	mov	r2, r0
 80005fe:	460b      	mov	r3, r1
 8000600:	4631      	mov	r1, r6
 8000602:	4848      	ldr	r0, [pc, #288]	; (8000724 <main+0x1a4>)
 8000604:	f000 fc2f 	bl	8000e66 <rsa_decrypt>

	   calculate_sha1(firmware_data, firmware_size , SHA1outp )  ;  /* calculate HASH2  */
 8000608:	4b4a      	ldr	r3, [pc, #296]	; (8000734 <main+0x1b4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8000610:	4a49      	ldr	r2, [pc, #292]	; (8000738 <main+0x1b8>)
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fa82 	bl	8000b1c <calculate_sha1>

	   uint8_t result = memcmp(decrypted_SIGNATURE, SHA1outp, sizeof(SHA1outp));
 8000618:	2214      	movs	r2, #20
 800061a:	4947      	ldr	r1, [pc, #284]	; (8000738 <main+0x1b8>)
 800061c:	4844      	ldr	r0, [pc, #272]	; (8000730 <main+0x1b0>)
 800061e:	f002 fdc9 	bl	80031b4 <memcmp>
 8000622:	4603      	mov	r3, r0
 8000624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	   if (result == 0)
 8000628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800062c:	2b00      	cmp	r3, #0
 800062e:	d122      	bne.n	8000676 <main+0xf6>
	   {
		printf("FIRMWARE IS AUTHENTICATED \n");
 8000630:	4842      	ldr	r0, [pc, #264]	; (800073c <main+0x1bc>)
 8000632:	f002 fe53 	bl	80032dc <puts>
		hmac_sha1(secret_key, 20 , firmware_data, firmware_size, hmac_result);   /*HASH1==HASH2 ---------->   UPDATE HMAC WITHOUT ERASING           */
 8000636:	4b42      	ldr	r3, [pc, #264]	; (8000740 <main+0x1c0>)
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <main+0x1b4>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8000642:	4b40      	ldr	r3, [pc, #256]	; (8000744 <main+0x1c4>)
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	460b      	mov	r3, r1
 8000648:	2114      	movs	r1, #20
 800064a:	f7ff ff03 	bl	8000454 <hmac_sha1>
		HAL_FLASH_Unlock();
 800064e:	f001 fbcf 	bl	8001df0 <HAL_FLASH_Unlock>
		HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
										(HMAC_ADRESS ),
										*hmac_result
 8000652:	4b3c      	ldr	r3, [pc, #240]	; (8000744 <main+0x1c4>)
 8000654:	781b      	ldrb	r3, [r3, #0]
		HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2200      	movs	r2, #0
 800065a:	461c      	mov	r4, r3
 800065c:	4615      	mov	r5, r2
 800065e:	4622      	mov	r2, r4
 8000660:	462b      	mov	r3, r5
 8000662:	4939      	ldr	r1, [pc, #228]	; (8000748 <main+0x1c8>)
 8000664:	2001      	movs	r0, #1
 8000666:	f001 fb53 	bl	8001d10 <HAL_FLASH_Program>
									  );                   /*STORE MAC */
		printf("UPDATE THE FIRMWARE MAC \n");
 800066a:	4838      	ldr	r0, [pc, #224]	; (800074c <main+0x1cc>)
 800066c:	f002 fe36 	bl	80032dc <puts>
		HAL_FLASH_Lock();
 8000670:	f001 fbe4 	bl	8001e3c <HAL_FLASH_Lock>
 8000674:	e014      	b.n	80006a0 <main+0x120>
	   }

	   else
	   {
		printf("FIRMWARE IS NOT AUTHENTICATED  \n");
 8000676:	4836      	ldr	r0, [pc, #216]	; (8000750 <main+0x1d0>)
 8000678:	f002 fe30 	bl	80032dc <puts>
		printf("CANNOT UPDATE THE FIRMWARE \n");
 800067c:	4835      	ldr	r0, [pc, #212]	; (8000754 <main+0x1d4>)
 800067e:	f002 fe2d 	bl	80032dc <puts>
		HAL_FLASH_Unlock();
 8000682:	f001 fbb5 	bl	8001df0 <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;
		EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
		EraseInitStruct.PageAddress   = APP_START_ADDRESS;
 800068a:	4b21      	ldr	r3, [pc, #132]	; (8000710 <main+0x190>)
 800068c:	613b      	str	r3, [r7, #16]
		EraseInitStruct.NbPages       = 15;
 800068e:	230f      	movs	r3, #15
 8000690:	617b      	str	r3, [r7, #20]
		HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );            /*HASH1!=HASH2---------------> ERASE FIRMWARE */
 8000692:	1d3a      	adds	r2, r7, #4
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	4611      	mov	r1, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fc90 	bl	8001fc0 <HAL_FLASHEx_Erase>


   }


   hmac_sha1(secret_key, 20 , firmware_data, firmware_size, hmac_result);         /*calculate MAC using HMAC algorithm and compare it with stored one ,,, if equal jump to target   else   erase */
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <main+0x1c0>)
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <main+0x1b4>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <main+0x1c4>)
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	460b      	mov	r3, r1
 80006b2:	2114      	movs	r1, #20
 80006b4:	f7ff fece 	bl	8000454 <hmac_sha1>

        if (*hmac_result == *HMAC_VALUE)                                        /*THIS IS THE CASE WHERE THERE IS NO FIRMWARE UPDATE REQUEST , ITS HERE WHEN WE SHOULD APPLY SECURE BOOT */
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <main+0x1c4>)
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <main+0x1d8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d105      	bne.n	80006d2 <main+0x152>
        {
        	printf("EXECUTE THE APPLICATION \n");
 80006c6:	4825      	ldr	r0, [pc, #148]	; (800075c <main+0x1dc>)
 80006c8:	f002 fe08 	bl	80032dc <puts>
        	goto_application();
 80006cc:	f000 f9ba 	bl	8000a44 <goto_application>
 80006d0:	e01c      	b.n	800070c <main+0x18c>
        }
        else
        {
        	printf("CANNOT EXECUTE APPLICATION \n");
 80006d2:	4823      	ldr	r0, [pc, #140]	; (8000760 <main+0x1e0>)
 80006d4:	f002 fe02 	bl	80032dc <puts>
        	printf("SECURITY ACCESS DENIED \n");
 80006d8:	4822      	ldr	r0, [pc, #136]	; (8000764 <main+0x1e4>)
 80006da:	f002 fdff 	bl	80032dc <puts>
        	HAL_Delay(1500);
 80006de:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80006e2:	f001 fa0d 	bl	8001b00 <HAL_Delay>
        	printf("ECU RESET IS REQUIRED   \n");
 80006e6:	4820      	ldr	r0, [pc, #128]	; (8000768 <main+0x1e8>)
 80006e8:	f002 fdf8 	bl	80032dc <puts>
        	printf("WAITINF FOR RESET COMMAND \n");
 80006ec:	481f      	ldr	r0, [pc, #124]	; (800076c <main+0x1ec>)
 80006ee:	f002 fdf5 	bl	80032dc <puts>

        	while(1)
        	{

            HAL_UART_Receive(&huart3, &ResCom, 1, 500);
 80006f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006f6:	2201      	movs	r2, #1
 80006f8:	491d      	ldr	r1, [pc, #116]	; (8000770 <main+0x1f0>)
 80006fa:	481e      	ldr	r0, [pc, #120]	; (8000774 <main+0x1f4>)
 80006fc:	f002 fba1 	bl	8002e42 <HAL_UART_Receive>
            if(ResCom != 0xFF)
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <main+0x1f0>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2bff      	cmp	r3, #255	; 0xff
 8000706:	d0f4      	beq.n	80006f2 <main+0x172>
              {
            	NVIC_SystemReset();
 8000708:	f7ff ff24 	bl	8000554 <__NVIC_SystemReset>





  while (1)
 800070c:	e7fe      	b.n	800070c <main+0x18c>
 800070e:	bf00      	nop
 8000710:	08005000 	.word	0x08005000
 8000714:	200001b8 	.word	0x200001b8
 8000718:	200001b0 	.word	0x200001b0
 800071c:	200001a8 	.word	0x200001a8
 8000720:	200000f1 	.word	0x200000f1
 8000724:	20000108 	.word	0x20000108
 8000728:	200001e8 	.word	0x200001e8
 800072c:	20000008 	.word	0x20000008
 8000730:	200001c0 	.word	0x200001c0
 8000734:	20000010 	.word	0x20000010
 8000738:	200000f4 	.word	0x200000f4
 800073c:	08003c10 	.word	0x08003c10
 8000740:	2000000c 	.word	0x2000000c
 8000744:	200001d4 	.word	0x200001d4
 8000748:	08007500 	.word	0x08007500
 800074c:	08003c2c 	.word	0x08003c2c
 8000750:	08003c48 	.word	0x08003c48
 8000754:	08003c68 	.word	0x08003c68
 8000758:	20000004 	.word	0x20000004
 800075c:	08003c84 	.word	0x08003c84
 8000760:	08003ca0 	.word	0x08003ca0
 8000764:	08003cbc 	.word	0x08003cbc
 8000768:	08003cd4 	.word	0x08003cd4
 800076c:	08003cf0 	.word	0x08003cf0
 8000770:	20000001 	.word	0x20000001
 8000774:	200000a4 	.word	0x200000a4

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b090      	sub	sp, #64	; 0x40
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	2228      	movs	r2, #40	; 0x28
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f002 fd32 	bl	80031f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079a:	2302      	movs	r3, #2
 800079c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a2:	2310      	movs	r3, #16
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007aa:	2300      	movs	r3, #0
 80007ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007ae:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 0318 	add.w	r3, r7, #24
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fe5f 	bl	800247c <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007c4:	f000 fbaa 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	230f      	movs	r3, #15
 80007ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2302      	movs	r3, #2
 80007ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2102      	movs	r1, #2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 f8cc 	bl	8002980 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007ee:	f000 fb95 	bl	8000f1c <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3740      	adds	r7, #64	; 0x40
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART3_UART_Init+0x4c>)
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <MX_USART3_UART_Init+0x50>)
 8000804:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_USART3_UART_Init+0x4c>)
 8000808:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800080c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART3_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART3_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART3_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART3_UART_Init+0x4c>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART3_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART3_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_USART3_UART_Init+0x4c>)
 8000834:	f002 fa32 	bl	8002c9c <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800083e:	f000 fb6d 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000a4 	.word	0x200000a4
 800084c:	40004800 	.word	0x40004800

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000864:	4b28      	ldr	r3, [pc, #160]	; (8000908 <MX_GPIO_Init+0xb8>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a27      	ldr	r2, [pc, #156]	; (8000908 <MX_GPIO_Init+0xb8>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <MX_GPIO_Init+0xb8>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0310 	and.w	r3, r3, #16
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <MX_GPIO_Init+0xb8>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a21      	ldr	r2, [pc, #132]	; (8000908 <MX_GPIO_Init+0xb8>)
 8000882:	f043 0308 	orr.w	r3, r3, #8
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_GPIO_Init+0xb8>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0308 	and.w	r3, r3, #8
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_GPIO_Init+0xb8>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <MX_GPIO_Init+0xb8>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_GPIO_Init+0xb8>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80008b2:	4816      	ldr	r0, [pc, #88]	; (800090c <MX_GPIO_Init+0xbc>)
 80008b4:	f001 fdb0 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008be:	4814      	ldr	r0, [pc, #80]	; (8000910 <MX_GPIO_Init+0xc0>)
 80008c0:	f001 fdaa 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008c4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	4619      	mov	r1, r3
 80008dc:	480b      	ldr	r0, [pc, #44]	; (800090c <MX_GPIO_Init+0xbc>)
 80008de:	f001 fc17 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4619      	mov	r1, r3
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_GPIO_Init+0xc0>)
 80008fc:	f001 fc08 	bl	8002110 <HAL_GPIO_Init>

}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000
 800090c:	40011000 	.word	0x40011000
 8000910:	40010c00 	.word	0x40010c00

08000914 <OTA_Update>:

/* USER CODE BEGIN 4 */


static void OTA_Update(void)
{
 8000914:	b5b0      	push	{r4, r5, r7, lr}
 8000916:	af00      	add	r7, sp, #0
    yy = 0xFF;
 8000918:	4b3f      	ldr	r3, [pc, #252]	; (8000a18 <OTA_Update+0x104>)
 800091a:	22ff      	movs	r2, #255	; 0xff
 800091c:	701a      	strb	r2, [r3, #0]
    xx = 0XFF;
 800091e:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <OTA_Update+0x108>)
 8000920:	22ff      	movs	r2, #255	; 0xff
 8000922:	701a      	strb	r2, [r3, #0]
    Nloop = 0 ;
 8000924:	4b3e      	ldr	r3, [pc, #248]	; (8000a20 <OTA_Update+0x10c>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
    printf("PREPARING FOR FIRMWARE UPDATE \n");
 800092a:	483e      	ldr	r0, [pc, #248]	; (8000a24 <OTA_Update+0x110>)
 800092c:	f002 fcd6 	bl	80032dc <puts>
    HAL_Delay(8000);
 8000930:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000934:	f001 f8e4 	bl	8001b00 <HAL_Delay>
    printf("READY TO UPDATE THE FIRMWARE  \n");
 8000938:	483b      	ldr	r0, [pc, #236]	; (8000a28 <OTA_Update+0x114>)
 800093a:	f002 fccf 	bl	80032dc <puts>
    printf("SEND YOUR APPLICATION \n");
 800093e:	483b      	ldr	r0, [pc, #236]	; (8000a2c <OTA_Update+0x118>)
 8000940:	f002 fccc 	bl	80032dc <puts>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14 , 1);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800094a:	4839      	ldr	r0, [pc, #228]	; (8000a30 <OTA_Update+0x11c>)
 800094c:	f001 fd64 	bl	8002418 <HAL_GPIO_WritePin>
    while(1)
    {


      HAL_UART_Receive(&huart3, &yy, 1, 5000);
 8000950:	f241 3388 	movw	r3, #5000	; 0x1388
 8000954:	2201      	movs	r2, #1
 8000956:	4930      	ldr	r1, [pc, #192]	; (8000a18 <OTA_Update+0x104>)
 8000958:	4836      	ldr	r0, [pc, #216]	; (8000a34 <OTA_Update+0x120>)
 800095a:	f002 fa72 	bl	8002e42 <HAL_UART_Receive>

      HAL_UART_Receive(&huart3, &xx, 1, 5000);
 800095e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000962:	2201      	movs	r2, #1
 8000964:	492d      	ldr	r1, [pc, #180]	; (8000a1c <OTA_Update+0x108>)
 8000966:	4833      	ldr	r0, [pc, #204]	; (8000a34 <OTA_Update+0x120>)
 8000968:	f002 fa6b 	bl	8002e42 <HAL_UART_Receive>

      if((xx == 0xFF) && (yy == 0xFF))
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <OTA_Update+0x108>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2bff      	cmp	r3, #255	; 0xff
 8000972:	d109      	bne.n	8000988 <OTA_Update+0x74>
 8000974:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <OTA_Update+0x104>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2bff      	cmp	r3, #255	; 0xff
 800097a:	d105      	bne.n	8000988 <OTA_Update+0x74>
       {
    	  Nloop ++ ;
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <OTA_Update+0x10c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <OTA_Update+0x10c>)
 8000986:	701a      	strb	r2, [r3, #0]
       }


        halfword_data = yy | (xx << 8 );
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <OTA_Update+0x104>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b21a      	sxth	r2, r3
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <OTA_Update+0x108>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	021b      	lsls	r3, r3, #8
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21b      	sxth	r3, r3
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <OTA_Update+0x124>)
 800099e:	801a      	strh	r2, [r3, #0]



     ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
 80009a0:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <OTA_Update+0x128>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
                                (APP_START_ADDRESS + application_write_idx ),
 80009a4:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80009a8:	f501 41a0 	add.w	r1, r1, #20480	; 0x5000
     ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <OTA_Update+0x124>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	2200      	movs	r2, #0
 80009b4:	461c      	mov	r4, r3
 80009b6:	4615      	mov	r5, r2
 80009b8:	4622      	mov	r2, r4
 80009ba:	462b      	mov	r3, r5
 80009bc:	2001      	movs	r0, #1
 80009be:	f001 f9a7 	bl	8001d10 <HAL_FLASH_Program>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <OTA_Update+0x12c>)
 80009c8:	701a      	strb	r2, [r3, #0]
                                halfword_data
                              );


      yy = 0xFF;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <OTA_Update+0x104>)
 80009cc:	22ff      	movs	r2, #255	; 0xff
 80009ce:	701a      	strb	r2, [r3, #0]
      xx = 0XFF;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <OTA_Update+0x108>)
 80009d2:	22ff      	movs	r2, #255	; 0xff
 80009d4:	701a      	strb	r2, [r3, #0]

      if( ret == HAL_OK )
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <OTA_Update+0x12c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d113      	bne.n	8000a06 <OTA_Update+0xf2>
      {
         //update the data count
         application_write_idx += 2;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <OTA_Update+0x128>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	3302      	adds	r3, #2
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <OTA_Update+0x128>)
 80009e8:	801a      	strh	r2, [r3, #0]
      else
       {

         break;
       }
      if(Nloop == 1)
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <OTA_Update+0x10c>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d1ae      	bne.n	8000950 <OTA_Update+0x3c>
      {

    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14 , 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <OTA_Update+0x11c>)
 80009fa:	f001 fd0d 	bl	8002418 <HAL_GPIO_WritePin>
    	  Nloop = 0 ;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <OTA_Update+0x10c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]


    	  break;
 8000a04:	e000      	b.n	8000a08 <OTA_Update+0xf4>
         break;
 8000a06:	bf00      	nop
      }

    }
	  ret = HAL_FLASH_Lock();
 8000a08:	f001 fa18 	bl	8001e3c <HAL_FLASH_Lock>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <OTA_Update+0x12c>)
 8000a12:	701a      	strb	r2, [r3, #0]
}
 8000a14:	bf00      	nop
 8000a16:	bdb0      	pop	{r4, r5, r7, pc}
 8000a18:	200000f0 	.word	0x200000f0
 8000a1c:	200000f3 	.word	0x200000f3
 8000a20:	200000f1 	.word	0x200000f1
 8000a24:	08003d0c 	.word	0x08003d0c
 8000a28:	08003d2c 	.word	0x08003d2c
 8000a2c:	08003d4c 	.word	0x08003d4c
 8000a30:	40011000 	.word	0x40011000
 8000a34:	200000a4 	.word	0x200000a4
 8000a38:	20000002 	.word	0x20000002
 8000a3c:	200000ec 	.word	0x200000ec
 8000a40:	200000f2 	.word	0x200000f2

08000a44 <goto_application>:


static void goto_application( void )
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
	void (*app_reset_handler1)(void) = (void*)(*((volatile uint32_t*)( APP_START_ADDRESS+ 4U)));
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <goto_application+0x34>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	607b      	str	r3, [r7, #4]
	  __set_MSP(*(volatile uint32_t*) APP_START_ADDRESS );
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <goto_application+0x38>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	f383 8808 	msr	MSP, r3
}
 8000a5c:	bf00      	nop
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <goto_application+0x3c>)
 8000a66:	f001 fcd7 	bl	8002418 <HAL_GPIO_WritePin>
	 	app_reset_handler1();
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4798      	blx	r3
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	08005004 	.word	0x08005004
 8000a7c:	08005000 	.word	0x08005000
 8000a80:	40011000 	.word	0x40011000

08000a84 <Wait_OTA_Request>:


HAL_StatusTypeDef Wait_OTA_Request( void )
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
 zz = 0xFF ;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <Wait_OTA_Request+0x78>)
 8000a8a:	22ff      	movs	r2, #255	; 0xff
 8000a8c:	701a      	strb	r2, [r3, #0]
 printf("WAITING FOR OTA DEMAND \n");
 8000a8e:	481c      	ldr	r0, [pc, #112]	; (8000b00 <Wait_OTA_Request+0x7c>)
 8000a90:	f002 fc24 	bl	80032dc <puts>
  while(1)
  {
    //Toggle GPIO
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a98:	481a      	ldr	r0, [pc, #104]	; (8000b04 <Wait_OTA_Request+0x80>)
 8000a9a:	f001 fcd5 	bl	8002448 <HAL_GPIO_TogglePin>

    HAL_UART_Receive(&huart3, &zz, 1, 500);
 8000a9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4915      	ldr	r1, [pc, #84]	; (8000afc <Wait_OTA_Request+0x78>)
 8000aa6:	4818      	ldr	r0, [pc, #96]	; (8000b08 <Wait_OTA_Request+0x84>)
 8000aa8:	f002 f9cb 	bl	8002e42 <HAL_UART_Receive>
    if (zz == 0xFF)
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <Wait_OTA_Request+0x78>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2bff      	cmp	r3, #255	; 0xff
 8000ab2:	d003      	beq.n	8000abc <Wait_OTA_Request+0x38>

     }
    else
     {

     ret = 1 ;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <Wait_OTA_Request+0x88>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
	 break ;
 8000aba:	e011      	b.n	8000ae0 <Wait_OTA_Request+0x5c>
     }

    if( Nloop == 20 )
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <Wait_OTA_Request+0x8c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b14      	cmp	r3, #20
 8000ac2:	d106      	bne.n	8000ad2 <Wait_OTA_Request+0x4e>
     {
      ret = 0 ;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <Wait_OTA_Request+0x88>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
      Nloop = 0;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <Wait_OTA_Request+0x8c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
      break;
 8000ad0:	e006      	b.n	8000ae0 <Wait_OTA_Request+0x5c>
     }
    Nloop++;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <Wait_OTA_Request+0x8c>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <Wait_OTA_Request+0x8c>)
 8000adc:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ade:	e7d9      	b.n	8000a94 <Wait_OTA_Request+0x10>

  }
  if(zz == 0xFF) {
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <Wait_OTA_Request+0x78>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2bff      	cmp	r3, #255	; 0xff
 8000ae6:	d105      	bne.n	8000af4 <Wait_OTA_Request+0x70>
	  printf("NO OTA DEMAND  \n");
 8000ae8:	480a      	ldr	r0, [pc, #40]	; (8000b14 <Wait_OTA_Request+0x90>)
 8000aea:	f002 fbf7 	bl	80032dc <puts>
	  printf("CHECK OLD APPLICATION \n");
 8000aee:	480a      	ldr	r0, [pc, #40]	; (8000b18 <Wait_OTA_Request+0x94>)
 8000af0:	f002 fbf4 	bl	80032dc <puts>
  }

  return ret;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <Wait_OTA_Request+0x88>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000000 	.word	0x20000000
 8000b00:	08003d64 	.word	0x08003d64
 8000b04:	40011000 	.word	0x40011000
 8000b08:	200000a4 	.word	0x200000a4
 8000b0c:	200000f2 	.word	0x200000f2
 8000b10:	200000f1 	.word	0x200000f1
 8000b14:	08003d7c 	.word	0x08003d7c
 8000b18:	08003d8c 	.word	0x08003d8c

08000b1c <calculate_sha1>:
}



static void calculate_sha1(const uint8_t* msg, unsigned nbytes, uint8_t* output)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b09c      	sub	sp, #112	; 0x70
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  struct sha1 ctx;

  sha1_reset(&ctx);
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 fa0b 	bl	8000f48 <sha1_reset>
  sha1_input(&ctx, msg, nbytes);
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	68f9      	ldr	r1, [r7, #12]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fa97 	bl	800106e <sha1_input>
  sha1_result(&ctx, output);
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fa34 	bl	8000fb4 <sha1_result>
}
 8000b4c:	bf00      	nop
 8000b4e:	3770      	adds	r7, #112	; 0x70
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <Receive_Signature>:
  return ret;
}


void Receive_Signature (void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	yy = 0xFF ;
 8000b58:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <Receive_Signature+0xec>)
 8000b5a:	22ff      	movs	r2, #255	; 0xff
 8000b5c:	701a      	strb	r2, [r3, #0]
	xx = 0xFF ;
 8000b5e:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <Receive_Signature+0xf0>)
 8000b60:	22ff      	movs	r2, #255	; 0xff
 8000b62:	701a      	strb	r2, [r3, #0]
	i = 0 ;
 8000b64:	4b38      	ldr	r3, [pc, #224]	; (8000c48 <Receive_Signature+0xf4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	801a      	strh	r2, [r3, #0]
    printf("PREPARE YOUR FIRMWARE SIGNATURE \n");
 8000b6a:	4838      	ldr	r0, [pc, #224]	; (8000c4c <Receive_Signature+0xf8>)
 8000b6c:	f002 fbb6 	bl	80032dc <puts>
    HAL_Delay(6000);
 8000b70:	f241 7070 	movw	r0, #6000	; 0x1770
 8000b74:	f000 ffc4 	bl	8001b00 <HAL_Delay>
    printf("READY TO RECEIVE THE SIGNATURE \n");
 8000b78:	4835      	ldr	r0, [pc, #212]	; (8000c50 <Receive_Signature+0xfc>)
 8000b7a:	f002 fbaf 	bl	80032dc <puts>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15 , 1);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b84:	4833      	ldr	r0, [pc, #204]	; (8000c54 <Receive_Signature+0x100>)
 8000b86:	f001 fc47 	bl	8002418 <HAL_GPIO_WritePin>
	while(1)
	{

	    HAL_UART_Receive(&huart3, &yy, 1, 5000);
 8000b8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b8e:	2201      	movs	r2, #1
 8000b90:	492b      	ldr	r1, [pc, #172]	; (8000c40 <Receive_Signature+0xec>)
 8000b92:	4831      	ldr	r0, [pc, #196]	; (8000c58 <Receive_Signature+0x104>)
 8000b94:	f002 f955 	bl	8002e42 <HAL_UART_Receive>


	    HAL_UART_Receive(&huart3, &xx, 1, 5000);
 8000b98:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4929      	ldr	r1, [pc, #164]	; (8000c44 <Receive_Signature+0xf0>)
 8000ba0:	482d      	ldr	r0, [pc, #180]	; (8000c58 <Receive_Signature+0x104>)
 8000ba2:	f002 f94e 	bl	8002e42 <HAL_UART_Receive>

	    if((xx == 0xFF) && (yy == 0xFF))
 8000ba6:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <Receive_Signature+0xf0>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2bff      	cmp	r3, #255	; 0xff
 8000bac:	d109      	bne.n	8000bc2 <Receive_Signature+0x6e>
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <Receive_Signature+0xec>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2bff      	cmp	r3, #255	; 0xff
 8000bb4:	d105      	bne.n	8000bc2 <Receive_Signature+0x6e>
	      {
	   	  Nloop ++ ;
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <Receive_Signature+0x108>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <Receive_Signature+0x108>)
 8000bc0:	701a      	strb	r2, [r3, #0]
	      }

		    Signature_KBUF[i++]   = yy ;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <Receive_Signature+0xf4>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	b291      	uxth	r1, r2
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <Receive_Signature+0xf4>)
 8000bcc:	8011      	strh	r1, [r2, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <Receive_Signature+0xec>)
 8000bd2:	7819      	ldrb	r1, [r3, #0]
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <Receive_Signature+0x10c>)
 8000bd6:	5499      	strb	r1, [r3, r2]
		    Signature_KBUF[i++] = xx ;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <Receive_Signature+0xf4>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	b291      	uxth	r1, r2
 8000be0:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <Receive_Signature+0xf4>)
 8000be2:	8011      	strh	r1, [r2, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <Receive_Signature+0xf0>)
 8000be8:	7819      	ldrb	r1, [r3, #0]
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <Receive_Signature+0x10c>)
 8000bec:	5499      	strb	r1, [r3, r2]




		yy = 0xFF ;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <Receive_Signature+0xec>)
 8000bf0:	22ff      	movs	r2, #255	; 0xff
 8000bf2:	701a      	strb	r2, [r3, #0]
		xx = 0xFF ;
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <Receive_Signature+0xf0>)
 8000bf6:	22ff      	movs	r2, #255	; 0xff
 8000bf8:	701a      	strb	r2, [r3, #0]
	    if(Nloop == 1)
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <Receive_Signature+0x108>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d1c3      	bne.n	8000b8a <Receive_Signature+0x36>
	      {

	    	  Nloop = 0 ;
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <Receive_Signature+0x108>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]

	    	  break;
 8000c08:	bf00      	nop
	      }
	}
	i =0 ;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <Receive_Signature+0xf4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	801a      	strh	r2, [r3, #0]
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15 , 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c16:	480f      	ldr	r0, [pc, #60]	; (8000c54 <Receive_Signature+0x100>)
 8000c18:	f001 fbfe 	bl	8002418 <HAL_GPIO_WritePin>
	 if(Signature_KBUF[0] == 0 && Signature_KBUF[1]==0)
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <Receive_Signature+0x10c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d107      	bne.n	8000c34 <Receive_Signature+0xe0>
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <Receive_Signature+0x10c>)
 8000c26:	785b      	ldrb	r3, [r3, #1]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d103      	bne.n	8000c34 <Receive_Signature+0xe0>
	 {
	   printf("NO SIGNATURE RECEIVED \n");
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <Receive_Signature+0x110>)
 8000c2e:	f002 fb55 	bl	80032dc <puts>
 8000c32:	e003      	b.n	8000c3c <Receive_Signature+0xe8>
	 }

	 else printf("SIGNATURE RECEIVED SUCCESFULLY \n");
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <Receive_Signature+0x114>)
 8000c36:	f002 fb51 	bl	80032dc <puts>

}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200000f0 	.word	0x200000f0
 8000c44:	200000f3 	.word	0x200000f3
 8000c48:	200000ee 	.word	0x200000ee
 8000c4c:	08003dbc 	.word	0x08003dbc
 8000c50:	08003de0 	.word	0x08003de0
 8000c54:	40011000 	.word	0x40011000
 8000c58:	200000a4 	.word	0x200000a4
 8000c5c:	200000f1 	.word	0x200000f1
 8000c60:	200001e8 	.word	0x200001e8
 8000c64:	08003e00 	.word	0x08003e00
 8000c68:	08003e18 	.word	0x08003e18

08000c6c <mod_exp>:

uint64_t mod_exp(uint64_t base, uint64_t exponent, uint64_t modulus) {
 8000c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000c78:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t result = 1;
 8000c7c:	f04f 0201 	mov.w	r2, #1
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e9c7 2304 	strd	r2, r3, [r7, #16]

    while (exponent > 0) {
 8000c88:	e042      	b.n	8000d10 <mod_exp+0xa4>
        if (exponent % 2 == 1) {
 8000c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c8e:	f002 0a01 	and.w	sl, r2, #1
 8000c92:	f04f 0b00 	mov.w	fp, #0
 8000c96:	ea5a 030b 	orrs.w	r3, sl, fp
 8000c9a:	d016      	beq.n	8000cca <mod_exp+0x5e>
            result = (result * base) % modulus;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	fb03 f202 	mul.w	r2, r3, r2
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6939      	ldr	r1, [r7, #16]
 8000ca8:	fb01 f303 	mul.w	r3, r1, r3
 8000cac:	4413      	add	r3, r2
 8000cae:	6939      	ldr	r1, [r7, #16]
 8000cb0:	68ba      	ldr	r2, [r7, #8]
 8000cb2:	fba1 4502 	umull	r4, r5, r1, r2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	461d      	mov	r5, r3
 8000cba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	4629      	mov	r1, r5
 8000cc2:	f7ff fa43 	bl	800014c <__aeabi_uldivmod>
 8000cc6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        base = (base * base) % modulus;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	fb03 f202 	mul.w	r2, r3, r2
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	fb01 f303 	mul.w	r3, r1, r3
 8000cda:	441a      	add	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	fba3 8903 	umull	r8, r9, r3, r3
 8000ce2:	eb02 0309 	add.w	r3, r2, r9
 8000ce6:	4699      	mov	r9, r3
 8000ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000cec:	4640      	mov	r0, r8
 8000cee:	4649      	mov	r1, r9
 8000cf0:	f7ff fa2c 	bl	800014c <__aeabi_uldivmod>
 8000cf4:	e9c7 2302 	strd	r2, r3, [r7, #8]
        exponent /= 2;
 8000cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000cfc:	f04f 0200 	mov.w	r2, #0
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	0842      	lsrs	r2, r0, #1
 8000d06:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8000d0a:	084b      	lsrs	r3, r1, #1
 8000d0c:	e9c7 2300 	strd	r2, r3, [r7]
    while (exponent > 0) {
 8000d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	d1b8      	bne.n	8000c8a <mod_exp+0x1e>
    }

    return result;
 8000d18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	4619      	mov	r1, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000d28 <mod_inverse>:
    }
    return gcd(b, a % b);
}

// Function to calculate the modular multiplicative inverse (a^(-1) mod m)
uint64_t mod_inverse(uint64_t a, uint64_t m) {
 8000d28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000d34:	e9c7 2300 	strd	r2, r3, [r7]
    for (uint64_t x = 1; x < m; x++) {
 8000d38:	f04f 0201 	mov.w	r2, #1
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000d44:	e022      	b.n	8000d8c <mod_inverse+0x64>
        if ((a * x) % m == 1) {
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	fb03 f202 	mul.w	r2, r3, r2
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	fb01 f303 	mul.w	r3, r1, r3
 8000d56:	4413      	add	r3, r2
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	fba1 4502 	umull	r4, r5, r1, r2
 8000d60:	442b      	add	r3, r5
 8000d62:	461d      	mov	r5, r3
 8000d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	f7ff f9ee 	bl	800014c <__aeabi_uldivmod>
 8000d70:	1e51      	subs	r1, r2, #1
 8000d72:	430b      	orrs	r3, r1
 8000d74:	d102      	bne.n	8000d7c <mod_inverse+0x54>
            return x;
 8000d76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d7a:	e013      	b.n	8000da4 <mod_inverse+0x7c>
    for (uint64_t x = 1; x < m; x++) {
 8000d7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d80:	f112 0801 	adds.w	r8, r2, #1
 8000d84:	f143 0900 	adc.w	r9, r3, #0
 8000d88:	e9c7 8904 	strd	r8, r9, [r7, #16]
 8000d8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d94:	4290      	cmp	r0, r2
 8000d96:	eb71 0303 	sbcs.w	r3, r1, r3
 8000d9a:	d3d4      	bcc.n	8000d46 <mod_inverse+0x1e>
        }
    }
    return 0; // Inverse does not exist
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	f04f 0300 	mov.w	r3, #0
}
 8000da4:	4610      	mov	r0, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000db0 <generate_rsa_key_pair>:

// Function to generate RSA key pair
void generate_rsa_key_pair(uint64_t *public_key, uint64_t *private_key, uint64_t *modulus) {
 8000db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000db4:	b08c      	sub	sp, #48	; 0x30
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6178      	str	r0, [r7, #20]
 8000dba:	6139      	str	r1, [r7, #16]
 8000dbc:	60fa      	str	r2, [r7, #12]
    // Choose two large prime numbers (for simplicity, these are hardcoded here)
    uint64_t p = 23;
 8000dbe:	f04f 0217 	mov.w	r2, #23
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    uint64_t q = 29;
 8000dca:	f04f 021d 	mov.w	r2, #29
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    *modulus = p * q;
 8000dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd8:	6a3a      	ldr	r2, [r7, #32]
 8000dda:	fb03 f202 	mul.w	r2, r3, r2
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000de2:	fb01 f303 	mul.w	r3, r1, r3
 8000de6:	4413      	add	r3, r2
 8000de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000dea:	6a3a      	ldr	r2, [r7, #32]
 8000dec:	fba1 2102 	umull	r2, r1, r1, r2
 8000df0:	6079      	str	r1, [r7, #4]
 8000df2:	603a      	str	r2, [r7, #0]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000e00:	e9c3 1200 	strd	r1, r2, [r3]
    uint64_t phi = (p - 1) * (q - 1);
 8000e04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000e08:	f112 3aff 	adds.w	sl, r2, #4294967295
 8000e0c:	f143 3bff 	adc.w	fp, r3, #4294967295
 8000e10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e14:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000e18:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000e1c:	fb08 f20b 	mul.w	r2, r8, fp
 8000e20:	fb0a f309 	mul.w	r3, sl, r9
 8000e24:	4413      	add	r3, r2
 8000e26:	fbaa 4508 	umull	r4, r5, sl, r8
 8000e2a:	442b      	add	r3, r5
 8000e2c:	461d      	mov	r5, r3
 8000e2e:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8000e32:	e9c7 4506 	strd	r4, r5, [r7, #24]

    // Choose public exponent (for simplicity, this is hardcoded here)
    *public_key = 17;
 8000e36:	6979      	ldr	r1, [r7, #20]
 8000e38:	f04f 0211 	mov.w	r2, #17
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate private exponent
    *private_key = mod_inverse(*public_key, phi);
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e4e:	f7ff ff6b 	bl	8000d28 <mod_inverse>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	6939      	ldr	r1, [r7, #16]
 8000e58:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000e5c:	bf00      	nop
 8000e5e:	3730      	adds	r7, #48	; 0x30
 8000e60:	46bd      	mov	sp, r7
 8000e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000e66 <rsa_decrypt>:
        ciphertext[i] = mod_exp(plaintext[i], public_key, modulus);
    }
}

// Function to decrypt a message using RSA
void rsa_decrypt(uint64_t *ciphertext, size_t len, uint64_t private_key, uint64_t modulus, uint8_t *plaintext) {
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b088      	sub	sp, #32
 8000e6a:	af02      	add	r7, sp, #8
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	e9c7 2300 	strd	r2, r3, [r7]
    for (size_t i = 0; i < len; i++) {
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	e015      	b.n	8000ea6 <rsa_decrypt+0x40>
        plaintext[i] = mod_exp(ciphertext[i], private_key, modulus);
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	4413      	add	r3, r2
 8000e82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e8a:	e9cd 2300 	strd	r2, r3, [sp]
 8000e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e92:	f7ff feeb 	bl	8000c6c <mod_exp>
 8000e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b2c2      	uxtb	r2, r0
 8000e9e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < len; i++) {
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d3e5      	bcc.n	8000e7a <rsa_decrypt+0x14>
    }
}
 8000eae:	bf00      	nop
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <convertByteArrayToUInt64Array>:


void convertByteArrayToUInt64Array( uint8_t* byteArray, uint64_t* uint64Array) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
    // Copy 8 bytes from the byte array to each uint64_t element
    for (size_t i = 0; i < 20; i++) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	e00e      	b.n	8000ee6 <convertByteArrayToUInt64Array+0x2e>
        memcpy(&uint64Array[i], &byteArray[i * 8], 8);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	18d0      	adds	r0, r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	2208      	movs	r2, #8
 8000eda:	4619      	mov	r1, r3
 8000edc:	f002 f97a 	bl	80031d4 <memcpy>
    for (size_t i = 0; i < 20; i++) {
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2b13      	cmp	r3, #19
 8000eea:	d9ed      	bls.n	8000ec8 <convertByteArrayToUInt64Array+0x10>
    }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f00:	1d39      	adds	r1, r7, #4
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	2201      	movs	r2, #1
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <__io_putchar+0x20>)
 8000f0a:	f001 ff17 	bl	8002d3c <HAL_UART_Transmit>
  return ch;
 8000f0e:	687b      	ldr	r3, [r7, #4]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200000a4 	.word	0x200000a4

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <Error_Handler+0x8>

08000f26 <_circular_shift>:
static void     _pad_block(struct sha1*);
static void     _process_block(struct sha1*);

/* SHA1 circular left shift */
static uint32_t _circular_shift(const uint32_t nbits, const uint32_t word)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  return ((word << nbits) | (word >> (32 - nbits)));
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f1c3 0320 	rsb	r3, r3, #32
 8000f38:	fa62 f303 	ror.w	r3, r2, r3
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
	...

08000f48 <sha1_reset>:
 * Returns:
 *     sha Error Code.
 *
 */
int sha1_reset(struct sha1* context)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if (context == 0)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <sha1_reset+0x12>
  {
    return shaNull;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e01d      	b.n	8000f96 <sha1_reset+0x4e>
  }

  context->Length_Low           = 0;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	655a      	str	r2, [r3, #84]	; 0x54
  context->Length_High          = 0;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	659a      	str	r2, [r3, #88]	; 0x58
  context->Message_Block_Index  = 0;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  context->Intermediate_Hash[0] = 0x67452301;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <sha1_reset+0x58>)
 8000f72:	641a      	str	r2, [r3, #64]	; 0x40
  context->Intermediate_Hash[1] = 0xEFCDAB89;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <sha1_reset+0x5c>)
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44
  context->Intermediate_Hash[2] = 0x98BADCFE;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <sha1_reset+0x60>)
 8000f7e:	649a      	str	r2, [r3, #72]	; 0x48
  context->Intermediate_Hash[3] = 0x10325476;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <sha1_reset+0x64>)
 8000f84:	64da      	str	r2, [r3, #76]	; 0x4c
  context->Intermediate_Hash[4] = 0xC3D2E1F0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <sha1_reset+0x68>)
 8000f8a:	651a      	str	r2, [r3, #80]	; 0x50

  context->flags = 0;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

  return shaSuccess;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	67452301 	.word	0x67452301
 8000fa4:	efcdab89 	.word	0xefcdab89
 8000fa8:	98badcfe 	.word	0x98badcfe
 8000fac:	10325476 	.word	0x10325476
 8000fb0:	c3d2e1f0 	.word	0xc3d2e1f0

08000fb4 <sha1_result>:
 * Returns:
 *     sha Error Code.
 *
 */
int sha1_result(struct sha1* context, uint8_t Message_Digest[SHA1HashSize])
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  int i;

  if (    (context == 0)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <sha1_result+0x16>
       || (Message_Digest == 0))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <sha1_result+0x1a>
  {
    return shaNull;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e04b      	b.n	8001066 <sha1_result+0xb2>
  }

  if ((context->flags & FLAG_CORRUPTED) != 0)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <sha1_result+0x2c>
  {
    return shaStateError;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e042      	b.n	8001066 <sha1_result+0xb2>
  }

  if ((context->flags & FLAG_COMPUTED) == 0)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d11f      	bne.n	800102e <sha1_result+0x7a>
  {
    _pad_block(context);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fb0c 	bl	800160c <_pad_block>

    for (i = 0; i < 64; ++i)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e007      	b.n	800100a <sha1_result+0x56>
    {
      /* message may be sensitive, clear it out */
      context->Message_Block[i] = 0;
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 64; ++i)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b3f      	cmp	r3, #63	; 0x3f
 800100e:	ddf4      	ble.n	8000ffa <sha1_result+0x46>
    }
    context->Length_Low = 0;    /* and clear length */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	655a      	str	r2, [r3, #84]	; 0x54
    context->Length_High = 0;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	659a      	str	r2, [r3, #88]	; 0x58
    context->flags |= FLAG_COMPUTED;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  }

  for (i = 0; i < SHA1HashSize; ++i)
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e014      	b.n	800105e <sha1_result+0xaa>
  {
    Message_Digest[i] = (context->Intermediate_Hash[i >> 2] >> (8 * (3 - (i & 0x03))));
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	109a      	asrs	r2, r3, #2
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3210      	adds	r2, #16
 800103c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43db      	mvns	r3, r3
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	fa22 f103 	lsr.w	r1, r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	4413      	add	r3, r2
 8001054:	b2ca      	uxtb	r2, r1
 8001056:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < SHA1HashSize; ++i)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3301      	adds	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b13      	cmp	r3, #19
 8001062:	dde7      	ble.n	8001034 <sha1_result+0x80>
  }

  return shaSuccess;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <sha1_input>:
 *  Returns:
 *      sha Error Code.
 *
 */
int sha1_input(struct sha1* context, const uint8_t* message_array, unsigned length)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
  if (length == 0)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <sha1_input+0x16>
  {
    return shaSuccess;
 8001080:	2300      	movs	r3, #0
 8001082:	e065      	b.n	8001150 <sha1_input+0xe2>
  }

  if (    (context == 0)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <sha1_input+0x22>
       || (message_array == 0))
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <sha1_input+0x26>
  {
    return shaNull;
 8001090:	2301      	movs	r3, #1
 8001092:	e05d      	b.n	8001150 <sha1_input+0xe2>
  }

  if ((context->flags & FLAG_COMPUTED) != 0)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00a      	beq.n	80010b8 <sha1_input+0x4a>
  {
    context->flags |= FLAG_CORRUPTED;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    return shaStateError;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e04b      	b.n	8001150 <sha1_input+0xe2>
  }

  if ((context->flags & FLAG_CORRUPTED) != 0)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d03b      	beq.n	800113e <sha1_input+0xd0>
  {
    return shaStateError;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e042      	b.n	8001150 <sha1_input+0xe2>
  }

  while (    (length != 0)
          && (context->flags == 0))
  {
    context->Message_Block[context->Message_Block_Index] = (*message_array);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80010d0:	461a      	mov	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	7819      	ldrb	r1, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	5499      	strb	r1, [r3, r2]

    context->Message_Block_Index += 1;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80010e0:	3301      	adds	r3, #1
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    context->Length_Low += 8;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ee:	f103 0208 	add.w	r2, r3, #8
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	655a      	str	r2, [r3, #84]	; 0x54

    if (context->Length_Low == 0)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d111      	bne.n	8001122 <sha1_input+0xb4>
    {
      context->Length_High += 1;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	659a      	str	r2, [r3, #88]	; 0x58

      if (context->Length_High == 0)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110c:	2b00      	cmp	r3, #0
 800110e:	d108      	bne.n	8001122 <sha1_input+0xb4>
      {
        /* Message is too long */
        context->flags |= FLAG_CORRUPTED;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	b2da      	uxtb	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
      }
    }

    if (context->Message_Block_Index == 64)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001128:	2b40      	cmp	r3, #64	; 0x40
 800112a:	d102      	bne.n	8001132 <sha1_input+0xc4>
    {
      _process_block(context);
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 f813 	bl	8001158 <_process_block>
    }

    message_array += 1;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3301      	adds	r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
    length -= 1;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	607b      	str	r3, [r7, #4]
  while (    (length != 0)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <sha1_input+0xe0>
          && (context->flags == 0))
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0bd      	beq.n	80010ca <sha1_input+0x5c>
  }

  return shaSuccess;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_process_block>:

#else

//#define METHOD2
  void _process_block(struct sha1 *context)
  {
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b0db      	sub	sp, #364	; 0x16c
 800115c:	af00      	add	r7, sp, #0
 800115e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001162:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001166:	6018      	str	r0, [r3, #0]
    uint32_t      A, B, C, D, E;     /* Word buffers                */

   /*
    * Initialize the first 16 words in the array W
    */
   for (t = 0; t < 16; ++t)
 8001168:	2300      	movs	r3, #0
 800116a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 800116e:	e06a      	b.n	8001246 <_process_block+0xee>
   {
      W[t]  = ((uint32_t)context->Message_Block[t * 4 + 0]) << 24;
 8001170:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800117a:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	5cd3      	ldrb	r3, [r2, r3]
 8001182:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 8001186:	0619      	lsls	r1, r3, #24
 8001188:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800118c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      W[t] |= ((uint32_t)context->Message_Block[t * 4 + 1]) << 16;
 8001194:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 8001198:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800119c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80011a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011a4:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	3301      	adds	r3, #1
 80011ac:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80011b0:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	5cd3      	ldrb	r3, [r2, r3]
 80011b8:	041b      	lsls	r3, r3, #16
 80011ba:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 80011be:	4319      	orrs	r1, r3
 80011c0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80011c4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80011c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      W[t] |= ((uint32_t)context->Message_Block[t * 4 + 2]) << 8;
 80011cc:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 80011d0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80011d4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80011d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011dc:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80011e8:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	5cd3      	ldrb	r3, [r2, r3]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 80011f6:	4319      	orrs	r1, r3
 80011f8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80011fc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      W[t] |= ((uint32_t)context->Message_Block[t * 4 + 3]) << 0;
 8001204:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 8001208:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800120c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 8001218:	0092      	lsls	r2, r2, #2
 800121a:	3203      	adds	r2, #3
 800121c:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8001220:	f5a1 71b2 	sub.w	r1, r1, #356	; 0x164
 8001224:	6809      	ldr	r1, [r1, #0]
 8001226:	5c8a      	ldrb	r2, [r1, r2]
 8001228:	4611      	mov	r1, r2
 800122a:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 800122e:	4319      	orrs	r1, r3
 8001230:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001234:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for (t = 0; t < 16; ++t)
 800123c:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001240:	3301      	adds	r3, #1
 8001242:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 8001246:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800124a:	2b0f      	cmp	r3, #15
 800124c:	d990      	bls.n	8001170 <_process_block+0x18>
    }

#ifndef METHOD2
    for (t = 16; t < 80; ++t)
 800124e:	2310      	movs	r3, #16
 8001250:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 8001254:	e03b      	b.n	80012ce <_process_block+0x176>
    {
      W[t] = _circular_shift(1, (W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16]));
 8001256:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800125a:	1eda      	subs	r2, r3, #3
 800125c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001260:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001264:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001268:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800126c:	f1a3 0108 	sub.w	r1, r3, #8
 8001270:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001274:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001278:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800127c:	405a      	eors	r2, r3
 800127e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001282:	f1a3 010e 	sub.w	r1, r3, #14
 8001286:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800128a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800128e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001292:	405a      	eors	r2, r3
 8001294:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001298:	f1a3 0110 	sub.w	r1, r3, #16
 800129c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80012a0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80012a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012a8:	4053      	eors	r3, r2
 80012aa:	f897 4167 	ldrb.w	r4, [r7, #359]	; 0x167
 80012ae:	4619      	mov	r1, r3
 80012b0:	2001      	movs	r0, #1
 80012b2:	f7ff fe38 	bl	8000f26 <_circular_shift>
 80012b6:	4602      	mov	r2, r0
 80012b8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80012bc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80012c0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    for (t = 16; t < 80; ++t)
 80012c4:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80012c8:	3301      	adds	r3, #1
 80012ca:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 80012ce:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80012d2:	2b4f      	cmp	r3, #79	; 0x4f
 80012d4:	d9bf      	bls.n	8001256 <_process_block+0xfe>
    }
#endif

    A = context->Intermediate_Hash[0];
 80012d6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80012da:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    B = context->Intermediate_Hash[1];
 80012e6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80012ea:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    C = context->Intermediate_Hash[2];
 80012f6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80012fa:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001302:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    D = context->Intermediate_Hash[3];
 8001306:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800130a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    E = context->Intermediate_Hash[4];
 8001316:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800131a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001322:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    for (t = 0; t < 20; ++t)
 8001326:	2300      	movs	r3, #0
 8001328:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 800132c:	e03e      	b.n	80013ac <_process_block+0x254>
      {
	W[s] = _circular_shift(1, (W[(s + 13) & 0x0f] ^ W[(s + 8) & 0x0f] ^ W[(s + 2) & 0x0f] ^ W[s]));
      }
      temp =  _circular_shift(5, A) + ((B & C) | ((~B) & D)) + E + W[s] + K[0];
#else
      temp =  _circular_shift(5, A) + ((B & C) | ((~B) & D)) + E + W[t] + K[0];
 800132e:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8001332:	2005      	movs	r0, #5
 8001334:	f7ff fdf7 	bl	8000f26 <_circular_shift>
 8001338:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800133c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001340:	401a      	ands	r2, r3
 8001342:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001346:	43d9      	mvns	r1, r3
 8001348:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800134c:	400b      	ands	r3, r1
 800134e:	4313      	orrs	r3, r2
 8001350:	18c2      	adds	r2, r0, r3
 8001352:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001356:	441a      	add	r2, r3
 8001358:	f897 1167 	ldrb.w	r1, [r7, #359]	; 0x167
 800135c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001360:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001364:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001368:	441a      	add	r2, r3
 800136a:	4ba7      	ldr	r3, [pc, #668]	; (8001608 <_process_block+0x4b0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
#endif
      E = D;
 8001374:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001378:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      D = C;
 800137c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001380:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
      C = _circular_shift(30, B);
 8001384:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8001388:	201e      	movs	r0, #30
 800138a:	f7ff fdcc 	bl	8000f26 <_circular_shift>
 800138e:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
      B = A;
 8001392:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001396:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      A = temp;
 800139a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800139e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    for (t = 0; t < 20; ++t)
 80013a2:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80013a6:	3301      	adds	r3, #1
 80013a8:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 80013ac:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80013b0:	2b13      	cmp	r3, #19
 80013b2:	d9bc      	bls.n	800132e <_process_block+0x1d6>
    }

    for (t = 20; t < 40; ++t)
 80013b4:	2314      	movs	r3, #20
 80013b6:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 80013ba:	e03b      	b.n	8001434 <_process_block+0x2dc>
#ifdef METHOD2
      s = (t & 0x0f);
      W[s] = _circular_shift(1, (W[(s + 13) & 0x0f] ^ W[(s + 8) & 0x0f] ^ W[(s + 2) & 0x0f] ^ W[s]));
      temp = _circular_shift(5, A) + (B ^ C ^ D) + E + W[s] + K[1];
#else
      temp = _circular_shift(5, A) + (B ^ C ^ D) + E + W[t] + K[1];
 80013bc:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80013c0:	2005      	movs	r0, #5
 80013c2:	f7ff fdb0 	bl	8000f26 <_circular_shift>
 80013c6:	4601      	mov	r1, r0
 80013c8:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80013cc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013d0:	405a      	eors	r2, r3
 80013d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013d6:	4053      	eors	r3, r2
 80013d8:	18ca      	adds	r2, r1, r3
 80013da:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80013de:	441a      	add	r2, r3
 80013e0:	f897 1167 	ldrb.w	r1, [r7, #359]	; 0x167
 80013e4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80013e8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80013ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013f0:	441a      	add	r2, r3
 80013f2:	4b85      	ldr	r3, [pc, #532]	; (8001608 <_process_block+0x4b0>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
#endif
      E = D;
 80013fc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001400:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      D = C;
 8001404:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001408:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
      C = _circular_shift(30, B);
 800140c:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8001410:	201e      	movs	r0, #30
 8001412:	f7ff fd88 	bl	8000f26 <_circular_shift>
 8001416:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
      B = A;
 800141a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800141e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      A = temp;
 8001422:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001426:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    for (t = 20; t < 40; ++t)
 800142a:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800142e:	3301      	adds	r3, #1
 8001430:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 8001434:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001438:	2b27      	cmp	r3, #39	; 0x27
 800143a:	d9bf      	bls.n	80013bc <_process_block+0x264>
    }

    for (t = 40; t < 60; ++t)
 800143c:	2328      	movs	r3, #40	; 0x28
 800143e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 8001442:	e040      	b.n	80014c6 <_process_block+0x36e>
#ifdef METHOD2
      s = (t & 0x0f);
      W[s] = _circular_shift(1, (W[(s + 13) & 0x0f] ^ W[(s + 8) & 0x0f] ^ W[(s + 2) & 0x0f] ^ W[s]));
      temp = _circular_shift(5, A) + ((B & C) | (B & D) | (C & D)) + E + W[s] + K[2];
#else
      temp = _circular_shift(5, A) + ((B & C) | (B & D) | (C & D)) + E + W[t] + K[2];
 8001444:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8001448:	2005      	movs	r0, #5
 800144a:	f7ff fd6c 	bl	8000f26 <_circular_shift>
 800144e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001452:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001456:	431a      	orrs	r2, r3
 8001458:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800145c:	401a      	ands	r2, r3
 800145e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8001462:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001466:	400b      	ands	r3, r1
 8001468:	4313      	orrs	r3, r2
 800146a:	18c2      	adds	r2, r0, r3
 800146c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001470:	441a      	add	r2, r3
 8001472:	f897 1167 	ldrb.w	r1, [r7, #359]	; 0x167
 8001476:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800147a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800147e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001482:	441a      	add	r2, r3
 8001484:	4b60      	ldr	r3, [pc, #384]	; (8001608 <_process_block+0x4b0>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4413      	add	r3, r2
 800148a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
#endif
      E = D;
 800148e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001492:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      D = C;
 8001496:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800149a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
      C = _circular_shift(30, B);
 800149e:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80014a2:	201e      	movs	r0, #30
 80014a4:	f7ff fd3f 	bl	8000f26 <_circular_shift>
 80014a8:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
      B = A;
 80014ac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80014b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      A = temp;
 80014b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80014b8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    for (t = 40; t < 60; ++t)
 80014bc:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80014c0:	3301      	adds	r3, #1
 80014c2:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 80014c6:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80014ca:	2b3b      	cmp	r3, #59	; 0x3b
 80014cc:	d9ba      	bls.n	8001444 <_process_block+0x2ec>
    }

    for (t = 60; t < 80; ++t)
 80014ce:	233c      	movs	r3, #60	; 0x3c
 80014d0:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 80014d4:	e03b      	b.n	800154e <_process_block+0x3f6>
#ifdef METHOD2
      s = (t & 0x0f);
      W[s] = _circular_shift(1, (W[(s + 13) & 0x0f] ^ W[(s + 8) & 0x0f] ^ W[(s + 2) & 0x0f] ^ W[s]));
      temp = _circular_shift(5, A) + (B ^ C ^ D) + E + W[s] + K[3];
#else
      temp = _circular_shift(5, A) + (B ^ C ^ D) + E + W[t] + K[3];
 80014d6:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80014da:	2005      	movs	r0, #5
 80014dc:	f7ff fd23 	bl	8000f26 <_circular_shift>
 80014e0:	4601      	mov	r1, r0
 80014e2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80014e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014ea:	405a      	eors	r2, r3
 80014ec:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80014f0:	4053      	eors	r3, r2
 80014f2:	18ca      	adds	r2, r1, r3
 80014f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014f8:	441a      	add	r2, r3
 80014fa:	f897 1167 	ldrb.w	r1, [r7, #359]	; 0x167
 80014fe:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001502:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001506:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800150a:	441a      	add	r2, r3
 800150c:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <_process_block+0x4b0>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4413      	add	r3, r2
 8001512:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
#endif
      E = D;
 8001516:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800151a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      D = C;
 800151e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001522:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
      C = _circular_shift(30, B);
 8001526:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800152a:	201e      	movs	r0, #30
 800152c:	f7ff fcfb 	bl	8000f26 <_circular_shift>
 8001530:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
      B = A;
 8001534:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001538:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      A = temp;
 800153c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001540:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    for (t = 60; t < 80; ++t)
 8001544:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001548:	3301      	adds	r3, #1
 800154a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 800154e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001552:	2b4f      	cmp	r3, #79	; 0x4f
 8001554:	d9bf      	bls.n	80014d6 <_process_block+0x37e>
    }

    context->Intermediate_Hash[0] += A;
 8001556:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800155a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001562:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001566:	441a      	add	r2, r3
 8001568:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800156c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
    context->Intermediate_Hash[1] += B;
 8001574:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001578:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001580:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001584:	441a      	add	r2, r3
 8001586:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800158a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
    context->Intermediate_Hash[2] += C;
 8001592:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001596:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800159e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015a2:	441a      	add	r2, r3
 80015a4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80015a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	649a      	str	r2, [r3, #72]	; 0x48
    context->Intermediate_Hash[3] += D;
 80015b0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80015b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015bc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80015c0:	441a      	add	r2, r3
 80015c2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80015c6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	64da      	str	r2, [r3, #76]	; 0x4c
    context->Intermediate_Hash[4] += E;
 80015ce:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80015d2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015da:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015de:	441a      	add	r2, r3
 80015e0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80015e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	651a      	str	r2, [r3, #80]	; 0x50

    context->Message_Block_Index = 0;
 80015ec:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80015f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  }
 80015fc:	bf00      	nop
 80015fe:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}
 8001606:	bf00      	nop
 8001608:	08003e38 	.word	0x08003e38

0800160c <_pad_block>:
 * Returns:
 *     Nothing.
 *
 */
static void _pad_block(struct sha1* context)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
   * Check to see if the current message block is too small to hold
   * the initial padding bits and length.  If so, we will pad the
   * block, process it, and then continue padding into a second
   * block.
   */
  if (context->Message_Block_Index > 55)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800161a:	2b37      	cmp	r3, #55	; 0x37
 800161c:	d93c      	bls.n	8001698 <_pad_block+0x8c>
  {
    context->Message_Block[context->Message_Block_Index] = 0x80;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001624:	461a      	mov	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	5499      	strb	r1, [r3, r2]
    context->Message_Block_Index += 1;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001632:	3301      	adds	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    while (context->Message_Block_Index < 64)
 800163c:	e00e      	b.n	800165c <_pad_block+0x50>
    {
      context->Message_Block[context->Message_Block_Index] = 0;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001644:	461a      	mov	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2100      	movs	r1, #0
 800164a:	5499      	strb	r1, [r3, r2]
      context->Message_Block_Index += 1;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001652:	3301      	adds	r3, #1
 8001654:	b29a      	uxth	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    while (context->Message_Block_Index < 64)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001662:	2b3f      	cmp	r3, #63	; 0x3f
 8001664:	d9eb      	bls.n	800163e <_pad_block+0x32>
    }

    _process_block(context);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fd76 	bl	8001158 <_process_block>

    while (context->Message_Block_Index < 56)
 800166c:	e00e      	b.n	800168c <_pad_block+0x80>
    {
      context->Message_Block[context->Message_Block_Index] = 0;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001674:	461a      	mov	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2100      	movs	r1, #0
 800167a:	5499      	strb	r1, [r3, r2]
      context->Message_Block_Index += 1;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001682:	3301      	adds	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    while (context->Message_Block_Index < 56)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001692:	2b37      	cmp	r3, #55	; 0x37
 8001694:	d9eb      	bls.n	800166e <_pad_block+0x62>
 8001696:	e023      	b.n	80016e0 <_pad_block+0xd4>
    }
  }
  else
  {
    context->Message_Block[context->Message_Block_Index] = 0x80;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800169e:	461a      	mov	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2180      	movs	r1, #128	; 0x80
 80016a4:	5499      	strb	r1, [r3, r2]
    context->Message_Block_Index += 1;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80016ac:	3301      	adds	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    while (context->Message_Block_Index < 56)
 80016b6:	e00e      	b.n	80016d6 <_pad_block+0xca>
    {
      context->Message_Block[context->Message_Block_Index] = 0;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80016be:	461a      	mov	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2100      	movs	r1, #0
 80016c4:	5499      	strb	r1, [r3, r2]
      context->Message_Block_Index += 1;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80016cc:	3301      	adds	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    while (context->Message_Block_Index < 56)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80016dc:	2b37      	cmp	r3, #55	; 0x37
 80016de:	d9eb      	bls.n	80016b8 <_pad_block+0xac>
  }

  /*
   * Store the message length as the last 8 bytes
   */
  context->Message_Block[56] = context->Length_High >> 24;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	0e1b      	lsrs	r3, r3, #24
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  context->Message_Block[57] = context->Length_High >> 16;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	0c1b      	lsrs	r3, r3, #16
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  context->Message_Block[58] = context->Length_High >>  8;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	b2da      	uxtb	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  context->Message_Block[59] = context->Length_High >>  0;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	b2da      	uxtb	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  context->Message_Block[60] = context->Length_Low  >> 24;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171a:	0e1b      	lsrs	r3, r3, #24
 800171c:	b2da      	uxtb	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  context->Message_Block[61] = context->Length_Low  >> 16;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001728:	0c1b      	lsrs	r3, r3, #16
 800172a:	b2da      	uxtb	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  context->Message_Block[62] = context->Length_Low  >>  8;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	b2da      	uxtb	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  context->Message_Block[63] = context->Length_Low  >>  0;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001744:	b2da      	uxtb	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  _process_block(context);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff fd03 	bl	8001158 <_process_block>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <HAL_MspInit+0x5c>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6193      	str	r3, [r2, #24]
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_MspInit+0x5c>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <HAL_MspInit+0x5c>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_MspInit+0x5c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_MspInit+0x60>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_MspInit+0x60>)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000

080017c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a1c      	ldr	r2, [pc, #112]	; (800184c <HAL_UART_MspInit+0x8c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d131      	bne.n	8001844 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_UART_MspInit+0x90>)
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	4a1a      	ldr	r2, [pc, #104]	; (8001850 <HAL_UART_MspInit+0x90>)
 80017e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ea:	61d3      	str	r3, [r2, #28]
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_UART_MspInit+0x90>)
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_UART_MspInit+0x90>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <HAL_UART_MspInit+0x90>)
 80017fe:	f043 0308 	orr.w	r3, r3, #8
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_UART_MspInit+0x90>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001814:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	f107 0310 	add.w	r3, r7, #16
 8001822:	4619      	mov	r1, r3
 8001824:	480b      	ldr	r0, [pc, #44]	; (8001854 <HAL_UART_MspInit+0x94>)
 8001826:	f000 fc73 	bl	8002110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800182a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800182e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4619      	mov	r1, r3
 800183e:	4805      	ldr	r0, [pc, #20]	; (8001854 <HAL_UART_MspInit+0x94>)
 8001840:	f000 fc66 	bl	8002110 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001844:	bf00      	nop
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40004800 	.word	0x40004800
 8001850:	40021000 	.word	0x40021000
 8001854:	40010c00 	.word	0x40010c00

08001858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800185c:	e7fe      	b.n	800185c <NMI_Handler+0x4>

0800185e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <HardFault_Handler+0x4>

08001864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <MemManage_Handler+0x4>

0800186a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <UsageFault_Handler+0x4>

08001876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189e:	f000 f913 	bl	8001ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e00a      	b.n	80018ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018b8:	f3af 8000 	nop.w
 80018bc:	4601      	mov	r1, r0
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	60ba      	str	r2, [r7, #8]
 80018c4:	b2ca      	uxtb	r2, r1
 80018c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dbf0      	blt.n	80018b8 <_read+0x12>
	}

return len;
 80018d6:	687b      	ldr	r3, [r7, #4]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e009      	b.n	8001906 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	60ba      	str	r2, [r7, #8]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fafc 	bl	8000ef8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3301      	adds	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	dbf1      	blt.n	80018f2 <_write+0x12>
	}
	return len;
 800190e:	687b      	ldr	r3, [r7, #4]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_close>:

int _close(int file)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	return -1;
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193e:	605a      	str	r2, [r3, #4]
	return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <_isatty>:

int _isatty(int file)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	return 1;
 8001954:	2301      	movs	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
	return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f001 fbda 	bl	8003160 <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20005000 	.word	0x20005000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	20000288 	.word	0x20000288
 80019e0:	200002c0 	.word	0x200002c0

080019e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019f0:	f7ff fff8 	bl	80019e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f4:	480b      	ldr	r0, [pc, #44]	; (8001a24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019f6:	490c      	ldr	r1, [pc, #48]	; (8001a28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019f8:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <LoopFillZerobss+0x16>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a0c:	4c09      	ldr	r4, [pc, #36]	; (8001a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f001 fba7 	bl	800316c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a1e:	f7fe fdaf 	bl	8000580 <main>
  bx lr
 8001a22:	4770      	bx	lr
  ldr r0, =_sdata
 8001a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a28:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001a2c:	08003ee8 	.word	0x08003ee8
  ldr r2, =_sbss
 8001a30:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001a34:	200002c0 	.word	0x200002c0

08001a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a38:	e7fe      	b.n	8001a38 <ADC1_2_IRQHandler>
	...

08001a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_Init+0x28>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_Init+0x28>)
 8001a46:	f043 0310 	orr.w	r3, r3, #16
 8001a4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 f92b 	bl	8001ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a52:	200f      	movs	r0, #15
 8001a54:	f000 f808 	bl	8001a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a58:	f7ff fe80 	bl	800175c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40022000 	.word	0x40022000

08001a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x54>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_InitTick+0x58>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f935 	bl	8001cf6 <HAL_SYSTICK_Config>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00e      	b.n	8001ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d80a      	bhi.n	8001ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f000 f90b 	bl	8001cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <HAL_InitTick+0x5c>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e000      	b.n	8001ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000014 	.word	0x20000014
 8001ac0:	2000001c 	.word	0x2000001c
 8001ac4:	20000018 	.word	0x20000018

08001ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_IncTick+0x1c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	2000001c 	.word	0x2000001c
 8001ae8:	2000028c 	.word	0x2000028c

08001aec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b02      	ldr	r3, [pc, #8]	; (8001afc <HAL_GetTick+0x10>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	2000028c 	.word	0x2000028c

08001b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff fff0 	bl	8001aec <HAL_GetTick>
 8001b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d005      	beq.n	8001b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_Delay+0x44>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b26:	bf00      	nop
 8001b28:	f7ff ffe0 	bl	8001aec <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d8f7      	bhi.n	8001b28 <HAL_Delay+0x28>
  {
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000001c 	.word	0x2000001c

08001b48 <__NVIC_SetPriorityGrouping>:
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_GetPriorityGrouping>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 0307 	and.w	r3, r3, #7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_SetPriority>:
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	; (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <NVIC_EncodePriority>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf28      	it	cs
 8001c1e:	2304      	movcs	r3, #4
 8001c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d902      	bls.n	8001c30 <NVIC_EncodePriority+0x30>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b03      	subs	r3, #3
 8001c2e:	e000      	b.n	8001c32 <NVIC_EncodePriority+0x32>
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	4313      	orrs	r3, r2
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	; 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c74:	d301      	bcc.n	8001c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00f      	b.n	8001c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <SysTick_Config+0x40>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c82:	210f      	movs	r1, #15
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f7ff ff90 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <SysTick_Config+0x40>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <SysTick_Config+0x40>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	e000e010 	.word	0xe000e010

08001ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff49 	bl	8001b48 <__NVIC_SetPriorityGrouping>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd0:	f7ff ff5e 	bl	8001b90 <__NVIC_GetPriorityGrouping>
 8001cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7ff ff90 	bl	8001c00 <NVIC_EncodePriority>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff5f 	bl	8001bac <__NVIC_SetPriority>
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffb0 	bl	8001c64 <SysTick_Config>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <HAL_FLASH_Program+0xd8>)
 8001d2c:	7e1b      	ldrb	r3, [r3, #24]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_FLASH_Program+0x26>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e054      	b.n	8001de0 <HAL_FLASH_Program+0xd0>
 8001d36:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <HAL_FLASH_Program+0xd8>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001d3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d40:	f000 f8a8 	bl	8001e94 <FLASH_WaitForLastOperation>
 8001d44:	4603      	mov	r3, r0
 8001d46:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d144      	bne.n	8001dd8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d102      	bne.n	8001d5a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001d54:	2301      	movs	r3, #1
 8001d56:	757b      	strb	r3, [r7, #21]
 8001d58:	e007      	b.n	8001d6a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d102      	bne.n	8001d66 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001d60:	2302      	movs	r3, #2
 8001d62:	757b      	strb	r3, [r7, #21]
 8001d64:	e001      	b.n	8001d6a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001d66:	2304      	movs	r3, #4
 8001d68:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	75bb      	strb	r3, [r7, #22]
 8001d6e:	e02d      	b.n	8001dcc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001d70:	7dbb      	ldrb	r3, [r7, #22]
 8001d72:	005a      	lsls	r2, r3, #1
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	eb02 0c03 	add.w	ip, r2, r3
 8001d7a:	7dbb      	ldrb	r3, [r7, #22]
 8001d7c:	0119      	lsls	r1, r3, #4
 8001d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d82:	f1c1 0620 	rsb	r6, r1, #32
 8001d86:	f1a1 0020 	sub.w	r0, r1, #32
 8001d8a:	fa22 f401 	lsr.w	r4, r2, r1
 8001d8e:	fa03 f606 	lsl.w	r6, r3, r6
 8001d92:	4334      	orrs	r4, r6
 8001d94:	fa23 f000 	lsr.w	r0, r3, r0
 8001d98:	4304      	orrs	r4, r0
 8001d9a:	fa23 f501 	lsr.w	r5, r3, r1
 8001d9e:	b2a3      	uxth	r3, r4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4660      	mov	r0, ip
 8001da4:	f000 f85a 	bl	8001e5c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001da8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dac:	f000 f872 	bl	8001e94 <FLASH_WaitForLastOperation>
 8001db0:	4603      	mov	r3, r0
 8001db2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001db4:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_FLASH_Program+0xdc>)
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	4a0c      	ldr	r2, [pc, #48]	; (8001dec <HAL_FLASH_Program+0xdc>)
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d107      	bne.n	8001dd6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001dc6:	7dbb      	ldrb	r3, [r7, #22]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	75bb      	strb	r3, [r7, #22]
 8001dcc:	7dba      	ldrb	r2, [r7, #22]
 8001dce:	7d7b      	ldrb	r3, [r7, #21]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d3cd      	bcc.n	8001d70 <HAL_FLASH_Program+0x60>
 8001dd4:	e000      	b.n	8001dd8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001dd6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_FLASH_Program+0xd8>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	761a      	strb	r2, [r3, #24]

  return status;
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de8:	20000290 	.word	0x20000290
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_FLASH_Unlock+0x40>)
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00d      	beq.n	8001e22 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_FLASH_Unlock+0x40>)
 8001e08:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <HAL_FLASH_Unlock+0x44>)
 8001e0a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_FLASH_Unlock+0x40>)
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <HAL_FLASH_Unlock+0x48>)
 8001e10:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_FLASH_Unlock+0x40>)
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001e22:	79fb      	ldrb	r3, [r7, #7]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40022000 	.word	0x40022000
 8001e34:	45670123 	.word	0x45670123
 8001e38:	cdef89ab 	.word	0xcdef89ab

08001e3c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_FLASH_Lock+0x1c>)
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_FLASH_Lock+0x1c>)
 8001e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40022000 	.word	0x40022000

08001e5c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <FLASH_Program_HalfWord+0x30>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <FLASH_Program_HalfWord+0x34>)
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <FLASH_Program_HalfWord+0x34>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	887a      	ldrh	r2, [r7, #2]
 8001e7e:	801a      	strh	r2, [r3, #0]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000290 	.word	0x20000290
 8001e90:	40022000 	.word	0x40022000

08001e94 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff fe26 	bl	8001aec <HAL_GetTick>
 8001ea0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001ea2:	e010      	b.n	8001ec6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eaa:	d00c      	beq.n	8001ec6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <FLASH_WaitForLastOperation+0x2e>
 8001eb2:	f7ff fe1b 	bl	8001aec <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d201      	bcs.n	8001ec6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e025      	b.n	8001f12 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <FLASH_WaitForLastOperation+0x88>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1e8      	bne.n	8001ea4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <FLASH_WaitForLastOperation+0x88>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <FLASH_WaitForLastOperation+0x88>)
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <FLASH_WaitForLastOperation+0x88>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10b      	bne.n	8001f08 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <FLASH_WaitForLastOperation+0x88>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <FLASH_WaitForLastOperation+0x88>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001f08:	f000 f80a 	bl	8001f20 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40022000 	.word	0x40022000

08001f20 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001f2a:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <FLASH_SetErrorCode+0x98>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d009      	beq.n	8001f4a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <FLASH_SetErrorCode+0x9c>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <FLASH_SetErrorCode+0x9c>)
 8001f40:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f043 0310 	orr.w	r3, r3, #16
 8001f48:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <FLASH_SetErrorCode+0x98>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <FLASH_SetErrorCode+0x9c>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <FLASH_SetErrorCode+0x9c>)
 8001f60:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <FLASH_SetErrorCode+0x98>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <FLASH_SetErrorCode+0x9c>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <FLASH_SetErrorCode+0x9c>)
 8001f80:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <FLASH_SetErrorCode+0x98>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <FLASH_SetErrorCode+0x98>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f240 1201 	movw	r2, #257	; 0x101
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d106      	bne.n	8001fa6 <FLASH_SetErrorCode+0x86>
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <FLASH_SetErrorCode+0x98>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <FLASH_SetErrorCode+0x98>)
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	61d3      	str	r3, [r2, #28]
}  
 8001fa4:	e002      	b.n	8001fac <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001fa6:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <FLASH_SetErrorCode+0x98>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	60d3      	str	r3, [r2, #12]
}  
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40022000 	.word	0x40022000
 8001fbc:	20000290 	.word	0x20000290

08001fc0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <HAL_FLASHEx_Erase+0xd0>)
 8001fd4:	7e1b      	ldrb	r3, [r3, #24]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_FLASHEx_Erase+0x1e>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e053      	b.n	8002086 <HAL_FLASHEx_Erase+0xc6>
 8001fde:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <HAL_FLASHEx_Erase+0xd0>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d116      	bne.n	800201a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001fec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ff0:	f7ff ff50 	bl	8001e94 <FLASH_WaitForLastOperation>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d141      	bne.n	800207e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f000 f84c 	bl	8002098 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002000:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002004:	f7ff ff46 	bl	8001e94 <FLASH_WaitForLastOperation>
 8002008:	4603      	mov	r3, r0
 800200a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <HAL_FLASHEx_Erase+0xd4>)
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	4a20      	ldr	r2, [pc, #128]	; (8002094 <HAL_FLASHEx_Erase+0xd4>)
 8002012:	f023 0304 	bic.w	r3, r3, #4
 8002016:	6113      	str	r3, [r2, #16]
 8002018:	e031      	b.n	800207e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800201a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800201e:	f7ff ff39 	bl	8001e94 <FLASH_WaitForLastOperation>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d12a      	bne.n	800207e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	f04f 32ff 	mov.w	r2, #4294967295
 800202e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	e019      	b.n	800206c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002038:	68b8      	ldr	r0, [r7, #8]
 800203a:	f000 f849 	bl	80020d0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800203e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002042:	f7ff ff27 	bl	8001e94 <FLASH_WaitForLastOperation>
 8002046:	4603      	mov	r3, r0
 8002048:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_FLASHEx_Erase+0xd4>)
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	4a11      	ldr	r2, [pc, #68]	; (8002094 <HAL_FLASHEx_Erase+0xd4>)
 8002050:	f023 0302 	bic.w	r3, r3, #2
 8002054:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	601a      	str	r2, [r3, #0]
            break;
 8002062:	e00c      	b.n	800207e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800206a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	029a      	lsls	r2, r3, #10
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	429a      	cmp	r2, r3
 800207c:	d3dc      	bcc.n	8002038 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <HAL_FLASHEx_Erase+0xd0>)
 8002080:	2200      	movs	r2, #0
 8002082:	761a      	strb	r2, [r3, #24]

  return status;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000290 	.word	0x20000290
 8002094:	40022000 	.word	0x40022000

08002098 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <FLASH_MassErase+0x30>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <FLASH_MassErase+0x34>)
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <FLASH_MassErase+0x34>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <FLASH_MassErase+0x34>)
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <FLASH_MassErase+0x34>)
 80020b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020bc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	20000290 	.word	0x20000290
 80020cc:	40022000 	.word	0x40022000

080020d0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <FLASH_PageErase+0x38>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <FLASH_PageErase+0x3c>)
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	4a0a      	ldr	r2, [pc, #40]	; (800210c <FLASH_PageErase+0x3c>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80020ea:	4a08      	ldr	r2, [pc, #32]	; (800210c <FLASH_PageErase+0x3c>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <FLASH_PageErase+0x3c>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	4a05      	ldr	r2, [pc, #20]	; (800210c <FLASH_PageErase+0x3c>)
 80020f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020fa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000290 	.word	0x20000290
 800210c:	40022000 	.word	0x40022000

08002110 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b08b      	sub	sp, #44	; 0x2c
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002122:	e169      	b.n	80023f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002124:	2201      	movs	r2, #1
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	429a      	cmp	r2, r3
 800213e:	f040 8158 	bne.w	80023f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4a9a      	ldr	r2, [pc, #616]	; (80023b0 <HAL_GPIO_Init+0x2a0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d05e      	beq.n	800220a <HAL_GPIO_Init+0xfa>
 800214c:	4a98      	ldr	r2, [pc, #608]	; (80023b0 <HAL_GPIO_Init+0x2a0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d875      	bhi.n	800223e <HAL_GPIO_Init+0x12e>
 8002152:	4a98      	ldr	r2, [pc, #608]	; (80023b4 <HAL_GPIO_Init+0x2a4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d058      	beq.n	800220a <HAL_GPIO_Init+0xfa>
 8002158:	4a96      	ldr	r2, [pc, #600]	; (80023b4 <HAL_GPIO_Init+0x2a4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d86f      	bhi.n	800223e <HAL_GPIO_Init+0x12e>
 800215e:	4a96      	ldr	r2, [pc, #600]	; (80023b8 <HAL_GPIO_Init+0x2a8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d052      	beq.n	800220a <HAL_GPIO_Init+0xfa>
 8002164:	4a94      	ldr	r2, [pc, #592]	; (80023b8 <HAL_GPIO_Init+0x2a8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d869      	bhi.n	800223e <HAL_GPIO_Init+0x12e>
 800216a:	4a94      	ldr	r2, [pc, #592]	; (80023bc <HAL_GPIO_Init+0x2ac>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d04c      	beq.n	800220a <HAL_GPIO_Init+0xfa>
 8002170:	4a92      	ldr	r2, [pc, #584]	; (80023bc <HAL_GPIO_Init+0x2ac>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d863      	bhi.n	800223e <HAL_GPIO_Init+0x12e>
 8002176:	4a92      	ldr	r2, [pc, #584]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d046      	beq.n	800220a <HAL_GPIO_Init+0xfa>
 800217c:	4a90      	ldr	r2, [pc, #576]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d85d      	bhi.n	800223e <HAL_GPIO_Init+0x12e>
 8002182:	2b12      	cmp	r3, #18
 8002184:	d82a      	bhi.n	80021dc <HAL_GPIO_Init+0xcc>
 8002186:	2b12      	cmp	r3, #18
 8002188:	d859      	bhi.n	800223e <HAL_GPIO_Init+0x12e>
 800218a:	a201      	add	r2, pc, #4	; (adr r2, 8002190 <HAL_GPIO_Init+0x80>)
 800218c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002190:	0800220b 	.word	0x0800220b
 8002194:	080021e5 	.word	0x080021e5
 8002198:	080021f7 	.word	0x080021f7
 800219c:	08002239 	.word	0x08002239
 80021a0:	0800223f 	.word	0x0800223f
 80021a4:	0800223f 	.word	0x0800223f
 80021a8:	0800223f 	.word	0x0800223f
 80021ac:	0800223f 	.word	0x0800223f
 80021b0:	0800223f 	.word	0x0800223f
 80021b4:	0800223f 	.word	0x0800223f
 80021b8:	0800223f 	.word	0x0800223f
 80021bc:	0800223f 	.word	0x0800223f
 80021c0:	0800223f 	.word	0x0800223f
 80021c4:	0800223f 	.word	0x0800223f
 80021c8:	0800223f 	.word	0x0800223f
 80021cc:	0800223f 	.word	0x0800223f
 80021d0:	0800223f 	.word	0x0800223f
 80021d4:	080021ed 	.word	0x080021ed
 80021d8:	08002201 	.word	0x08002201
 80021dc:	4a79      	ldr	r2, [pc, #484]	; (80023c4 <HAL_GPIO_Init+0x2b4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021e2:	e02c      	b.n	800223e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	623b      	str	r3, [r7, #32]
          break;
 80021ea:	e029      	b.n	8002240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	3304      	adds	r3, #4
 80021f2:	623b      	str	r3, [r7, #32]
          break;
 80021f4:	e024      	b.n	8002240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	3308      	adds	r3, #8
 80021fc:	623b      	str	r3, [r7, #32]
          break;
 80021fe:	e01f      	b.n	8002240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	330c      	adds	r3, #12
 8002206:	623b      	str	r3, [r7, #32]
          break;
 8002208:	e01a      	b.n	8002240 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002212:	2304      	movs	r3, #4
 8002214:	623b      	str	r3, [r7, #32]
          break;
 8002216:	e013      	b.n	8002240 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d105      	bne.n	800222c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002220:	2308      	movs	r3, #8
 8002222:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	611a      	str	r2, [r3, #16]
          break;
 800222a:	e009      	b.n	8002240 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800222c:	2308      	movs	r3, #8
 800222e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	615a      	str	r2, [r3, #20]
          break;
 8002236:	e003      	b.n	8002240 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
          break;
 800223c:	e000      	b.n	8002240 <HAL_GPIO_Init+0x130>
          break;
 800223e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2bff      	cmp	r3, #255	; 0xff
 8002244:	d801      	bhi.n	800224a <HAL_GPIO_Init+0x13a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	e001      	b.n	800224e <HAL_GPIO_Init+0x13e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3304      	adds	r3, #4
 800224e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2bff      	cmp	r3, #255	; 0xff
 8002254:	d802      	bhi.n	800225c <HAL_GPIO_Init+0x14c>
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	e002      	b.n	8002262 <HAL_GPIO_Init+0x152>
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	3b08      	subs	r3, #8
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	210f      	movs	r1, #15
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	401a      	ands	r2, r3
 8002274:	6a39      	ldr	r1, [r7, #32]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	431a      	orrs	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80b1 	beq.w	80023f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002290:	4b4d      	ldr	r3, [pc, #308]	; (80023c8 <HAL_GPIO_Init+0x2b8>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	4a4c      	ldr	r2, [pc, #304]	; (80023c8 <HAL_GPIO_Init+0x2b8>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6193      	str	r3, [r2, #24]
 800229c:	4b4a      	ldr	r3, [pc, #296]	; (80023c8 <HAL_GPIO_Init+0x2b8>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022a8:	4a48      	ldr	r2, [pc, #288]	; (80023cc <HAL_GPIO_Init+0x2bc>)
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3302      	adds	r3, #2
 80022b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	220f      	movs	r2, #15
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4013      	ands	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a40      	ldr	r2, [pc, #256]	; (80023d0 <HAL_GPIO_Init+0x2c0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d013      	beq.n	80022fc <HAL_GPIO_Init+0x1ec>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a3f      	ldr	r2, [pc, #252]	; (80023d4 <HAL_GPIO_Init+0x2c4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d00d      	beq.n	80022f8 <HAL_GPIO_Init+0x1e8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a3e      	ldr	r2, [pc, #248]	; (80023d8 <HAL_GPIO_Init+0x2c8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d007      	beq.n	80022f4 <HAL_GPIO_Init+0x1e4>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a3d      	ldr	r2, [pc, #244]	; (80023dc <HAL_GPIO_Init+0x2cc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d101      	bne.n	80022f0 <HAL_GPIO_Init+0x1e0>
 80022ec:	2303      	movs	r3, #3
 80022ee:	e006      	b.n	80022fe <HAL_GPIO_Init+0x1ee>
 80022f0:	2304      	movs	r3, #4
 80022f2:	e004      	b.n	80022fe <HAL_GPIO_Init+0x1ee>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e002      	b.n	80022fe <HAL_GPIO_Init+0x1ee>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_GPIO_Init+0x1ee>
 80022fc:	2300      	movs	r3, #0
 80022fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002300:	f002 0203 	and.w	r2, r2, #3
 8002304:	0092      	lsls	r2, r2, #2
 8002306:	4093      	lsls	r3, r2
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800230e:	492f      	ldr	r1, [pc, #188]	; (80023cc <HAL_GPIO_Init+0x2bc>)
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d006      	beq.n	8002336 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	492c      	ldr	r1, [pc, #176]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	608b      	str	r3, [r1, #8]
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002336:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	43db      	mvns	r3, r3
 800233e:	4928      	ldr	r1, [pc, #160]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002340:	4013      	ands	r3, r2
 8002342:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002350:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	4922      	ldr	r1, [pc, #136]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	60cb      	str	r3, [r1, #12]
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	43db      	mvns	r3, r3
 8002366:	491e      	ldr	r1, [pc, #120]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002368:	4013      	ands	r3, r2
 800236a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	4918      	ldr	r1, [pc, #96]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
 8002384:	e006      	b.n	8002394 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002386:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	43db      	mvns	r3, r3
 800238e:	4914      	ldr	r1, [pc, #80]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002390:	4013      	ands	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d021      	beq.n	80023e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	490e      	ldr	r1, [pc, #56]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]
 80023ac:	e021      	b.n	80023f2 <HAL_GPIO_Init+0x2e2>
 80023ae:	bf00      	nop
 80023b0:	10320000 	.word	0x10320000
 80023b4:	10310000 	.word	0x10310000
 80023b8:	10220000 	.word	0x10220000
 80023bc:	10210000 	.word	0x10210000
 80023c0:	10120000 	.word	0x10120000
 80023c4:	10110000 	.word	0x10110000
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40010000 	.word	0x40010000
 80023d0:	40010800 	.word	0x40010800
 80023d4:	40010c00 	.word	0x40010c00
 80023d8:	40011000 	.word	0x40011000
 80023dc:	40011400 	.word	0x40011400
 80023e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_GPIO_Init+0x304>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	4909      	ldr	r1, [pc, #36]	; (8002414 <HAL_GPIO_Init+0x304>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	3301      	adds	r3, #1
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	f47f ae8e 	bne.w	8002124 <HAL_GPIO_Init+0x14>
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	372c      	adds	r7, #44	; 0x2c
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	40010400 	.word	0x40010400

08002418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
 8002424:	4613      	mov	r3, r2
 8002426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002428:	787b      	ldrb	r3, [r7, #1]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002434:	e003      	b.n	800243e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	041a      	lsls	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	611a      	str	r2, [r3, #16]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4013      	ands	r3, r2
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43d9      	mvns	r1, r3
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	400b      	ands	r3, r1
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	611a      	str	r2, [r3, #16]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
	...

0800247c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e272      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 8087 	beq.w	80025aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800249c:	4b92      	ldr	r3, [pc, #584]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d00c      	beq.n	80024c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024a8:	4b8f      	ldr	r3, [pc, #572]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d112      	bne.n	80024da <HAL_RCC_OscConfig+0x5e>
 80024b4:	4b8c      	ldr	r3, [pc, #560]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c0:	d10b      	bne.n	80024da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c2:	4b89      	ldr	r3, [pc, #548]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d06c      	beq.n	80025a8 <HAL_RCC_OscConfig+0x12c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d168      	bne.n	80025a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e24c      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x76>
 80024e4:	4b80      	ldr	r3, [pc, #512]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a7f      	ldr	r2, [pc, #508]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e02e      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x98>
 80024fa:	4b7b      	ldr	r3, [pc, #492]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7a      	ldr	r2, [pc, #488]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b78      	ldr	r3, [pc, #480]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a77      	ldr	r2, [pc, #476]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800250c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e01d      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0xbc>
 800251e:	4b72      	ldr	r3, [pc, #456]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a71      	ldr	r2, [pc, #452]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b6f      	ldr	r3, [pc, #444]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6e      	ldr	r2, [pc, #440]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 8002538:	4b6b      	ldr	r3, [pc, #428]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6a      	ldr	r2, [pc, #424]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800253e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b68      	ldr	r3, [pc, #416]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a67      	ldr	r2, [pc, #412]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800254a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7ff fac8 	bl	8001aec <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff fac4 	bl	8001aec <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e200      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b5d      	ldr	r3, [pc, #372]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0xe4>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7ff fab4 	bl	8001aec <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff fab0 	bl	8001aec <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1ec      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x10c>
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d063      	beq.n	800267e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b6:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025c2:	4b49      	ldr	r3, [pc, #292]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d11c      	bne.n	8002608 <HAL_RCC_OscConfig+0x18c>
 80025ce:	4b46      	ldr	r3, [pc, #280]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d116      	bne.n	8002608 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	4b43      	ldr	r3, [pc, #268]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_RCC_OscConfig+0x176>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1c0      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4939      	ldr	r1, [pc, #228]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	e03a      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002610:	4b36      	ldr	r3, [pc, #216]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7ff fa69 	bl	8001aec <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261e:	f7ff fa65 	bl	8001aec <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1a1      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4927      	ldr	r1, [pc, #156]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7ff fa48 	bl	8001aec <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002660:	f7ff fa44 	bl	8001aec <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e180      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d03a      	beq.n	8002700 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d019      	beq.n	80026c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002698:	f7ff fa28 	bl	8001aec <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a0:	f7ff fa24 	bl	8001aec <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e160      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026be:	2001      	movs	r0, #1
 80026c0:	f000 face 	bl	8002c60 <RCC_Delay>
 80026c4:	e01c      	b.n	8002700 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026cc:	f7ff fa0e 	bl	8001aec <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d2:	e00f      	b.n	80026f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d4:	f7ff fa0a 	bl	8001aec <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d908      	bls.n	80026f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e146      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	42420000 	.word	0x42420000
 80026f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	4b92      	ldr	r3, [pc, #584]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1e9      	bne.n	80026d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80a6 	beq.w	800285a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002712:	4b8b      	ldr	r3, [pc, #556]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10d      	bne.n	800273a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b88      	ldr	r3, [pc, #544]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	4a87      	ldr	r2, [pc, #540]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	61d3      	str	r3, [r2, #28]
 800272a:	4b85      	ldr	r3, [pc, #532]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002736:	2301      	movs	r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273a:	4b82      	ldr	r3, [pc, #520]	; (8002944 <HAL_RCC_OscConfig+0x4c8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d118      	bne.n	8002778 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002746:	4b7f      	ldr	r3, [pc, #508]	; (8002944 <HAL_RCC_OscConfig+0x4c8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7e      	ldr	r2, [pc, #504]	; (8002944 <HAL_RCC_OscConfig+0x4c8>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002752:	f7ff f9cb 	bl	8001aec <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275a:	f7ff f9c7 	bl	8001aec <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b64      	cmp	r3, #100	; 0x64
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e103      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	4b75      	ldr	r3, [pc, #468]	; (8002944 <HAL_RCC_OscConfig+0x4c8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x312>
 8002780:	4b6f      	ldr	r3, [pc, #444]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4a6e      	ldr	r2, [pc, #440]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6213      	str	r3, [r2, #32]
 800278c:	e02d      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x334>
 8002796:	4b6a      	ldr	r3, [pc, #424]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a69      	ldr	r2, [pc, #420]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	4b67      	ldr	r3, [pc, #412]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a66      	ldr	r2, [pc, #408]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6213      	str	r3, [r2, #32]
 80027ae:	e01c      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d10c      	bne.n	80027d2 <HAL_RCC_OscConfig+0x356>
 80027b8:	4b61      	ldr	r3, [pc, #388]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4a60      	ldr	r2, [pc, #384]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	6213      	str	r3, [r2, #32]
 80027c4:	4b5e      	ldr	r3, [pc, #376]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4a5d      	ldr	r2, [pc, #372]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6213      	str	r3, [r2, #32]
 80027d0:	e00b      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 80027d2:	4b5b      	ldr	r3, [pc, #364]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a5a      	ldr	r2, [pc, #360]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	6213      	str	r3, [r2, #32]
 80027de:	4b58      	ldr	r3, [pc, #352]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	4a57      	ldr	r2, [pc, #348]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	f023 0304 	bic.w	r3, r3, #4
 80027e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d015      	beq.n	800281e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f2:	f7ff f97b 	bl	8001aec <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7ff f977 	bl	8001aec <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	; 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0b1      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002810:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ee      	beq.n	80027fa <HAL_RCC_OscConfig+0x37e>
 800281c:	e014      	b.n	8002848 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7ff f965 	bl	8001aec <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002824:	e00a      	b.n	800283c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7ff f961 	bl	8001aec <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	; 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e09b      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283c:	4b40      	ldr	r3, [pc, #256]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ee      	bne.n	8002826 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002848:	7dfb      	ldrb	r3, [r7, #23]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d105      	bne.n	800285a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284e:	4b3c      	ldr	r3, [pc, #240]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4a3b      	ldr	r2, [pc, #236]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002858:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8087 	beq.w	8002972 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002864:	4b36      	ldr	r3, [pc, #216]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d061      	beq.n	8002934 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d146      	bne.n	8002906 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002878:	4b33      	ldr	r3, [pc, #204]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7ff f935 	bl	8001aec <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7ff f931 	bl	8001aec <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e06d      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ac:	d108      	bne.n	80028c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	4921      	ldr	r1, [pc, #132]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c0:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a19      	ldr	r1, [r3, #32]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	430b      	orrs	r3, r1
 80028d2:	491b      	ldr	r1, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7ff f905 	bl	8001aec <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7ff f901 	bl	8001aec <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e03d      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x46a>
 8002904:	e035      	b.n	8002972 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7ff f8ee 	bl	8001aec <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002914:	f7ff f8ea 	bl	8001aec <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e026      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x498>
 8002932:	e01e      	b.n	8002972 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d107      	bne.n	800294c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e019      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
 8002940:	40021000 	.word	0x40021000
 8002944:	40007000 	.word	0x40007000
 8002948:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_OscConfig+0x500>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	429a      	cmp	r2, r3
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d001      	beq.n	8002972 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0d0      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4b6a      	ldr	r3, [pc, #424]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d910      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b67      	ldr	r3, [pc, #412]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 0207 	bic.w	r2, r3, #7
 80029aa:	4965      	ldr	r1, [pc, #404]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b63      	ldr	r3, [pc, #396]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b8      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029dc:	4b59      	ldr	r3, [pc, #356]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a58      	ldr	r2, [pc, #352]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f4:	4b53      	ldr	r3, [pc, #332]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a52      	ldr	r2, [pc, #328]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b50      	ldr	r3, [pc, #320]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	494d      	ldr	r1, [pc, #308]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d040      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d115      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e07f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e073      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e06b      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5e:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f023 0203 	bic.w	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4936      	ldr	r1, [pc, #216]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a70:	f7ff f83c 	bl	8001aec <HAL_GetTick>
 8002a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a78:	f7ff f838 	bl	8001aec <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e053      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	4b2d      	ldr	r3, [pc, #180]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 020c 	and.w	r2, r3, #12
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1eb      	bne.n	8002a78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d210      	bcs.n	8002ad0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 0207 	bic.w	r2, r3, #7
 8002ab6:	4922      	ldr	r1, [pc, #136]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e032      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4916      	ldr	r1, [pc, #88]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	490e      	ldr	r1, [pc, #56]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b0e:	f000 f821 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002b12:	4602      	mov	r2, r0
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	490a      	ldr	r1, [pc, #40]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002b20:	5ccb      	ldrb	r3, [r1, r3]
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1cc>)
 8002b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1d0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe ff9a 	bl	8001a68 <HAL_InitTick>

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40022000 	.word	0x40022000
 8002b44:	40021000 	.word	0x40021000
 8002b48:	08003e48 	.word	0x08003e48
 8002b4c:	20000014 	.word	0x20000014
 8002b50:	20000018 	.word	0x20000018

08002b54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x30>
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0x36>
 8002b82:	e027      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_RCC_GetSysClockFreq+0x98>)
 8002b86:	613b      	str	r3, [r7, #16]
      break;
 8002b88:	e027      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	0c9b      	lsrs	r3, r3, #18
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b94:	5cd3      	ldrb	r3, [r2, r3]
 8002b96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d010      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	0c5b      	lsrs	r3, r3, #17
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	4a11      	ldr	r2, [pc, #68]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <HAL_RCC_GetSysClockFreq+0x98>)
 8002bb6:	fb03 f202 	mul.w	r2, r3, r2
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	e004      	b.n	8002bce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a0c      	ldr	r2, [pc, #48]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	613b      	str	r3, [r7, #16]
      break;
 8002bd2:	e002      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetSysClockFreq+0x98>)
 8002bd6:	613b      	str	r3, [r7, #16]
      break;
 8002bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bda:	693b      	ldr	r3, [r7, #16]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	007a1200 	.word	0x007a1200
 8002bf0:	08003e60 	.word	0x08003e60
 8002bf4:	08003e70 	.word	0x08003e70
 8002bf8:	003d0900 	.word	0x003d0900

08002bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c00:	4b02      	ldr	r3, [pc, #8]	; (8002c0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	20000014 	.word	0x20000014

08002c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c14:	f7ff fff2 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4903      	ldr	r1, [pc, #12]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	08003e58 	.word	0x08003e58

08002c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c3c:	f7ff ffde 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	0adb      	lsrs	r3, r3, #11
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4903      	ldr	r1, [pc, #12]	; (8002c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08003e58 	.word	0x08003e58

08002c60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <RCC_Delay+0x34>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <RCC_Delay+0x38>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0a5b      	lsrs	r3, r3, #9
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c7c:	bf00      	nop
  }
  while (Delay --);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1e5a      	subs	r2, r3, #1
 8002c82:	60fa      	str	r2, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f9      	bne.n	8002c7c <RCC_Delay+0x1c>
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	20000014 	.word	0x20000014
 8002c98:	10624dd3 	.word	0x10624dd3

08002c9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e042      	b.n	8002d34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe fd7c 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2224      	movs	r2, #36	; 0x24
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f9af 	bl	8003044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	; 0x28
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d16d      	bne.n	8002e38 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_UART_Transmit+0x2c>
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e066      	b.n	8002e3a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2221      	movs	r2, #33	; 0x21
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d7a:	f7fe feb7 	bl	8001aec <HAL_GetTick>
 8002d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	88fa      	ldrh	r2, [r7, #6]
 8002d8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d94:	d108      	bne.n	8002da8 <HAL_UART_Transmit+0x6c>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d104      	bne.n	8002da8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	e003      	b.n	8002db0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002db0:	e02a      	b.n	8002e08 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2200      	movs	r2, #0
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f8d2 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e036      	b.n	8002e3a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10b      	bne.n	8002dea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	3302      	adds	r3, #2
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	e007      	b.n	8002dfa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	3301      	adds	r3, #1
 8002df8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1cf      	bne.n	8002db2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2140      	movs	r1, #64	; 0x40
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f8a2 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e006      	b.n	8002e3a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e000      	b.n	8002e3a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e38:	2302      	movs	r3, #2
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b08a      	sub	sp, #40	; 0x28
 8002e46:	af02      	add	r7, sp, #8
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d17c      	bne.n	8002f5c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <HAL_UART_Receive+0x2c>
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e075      	b.n	8002f5e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2222      	movs	r2, #34	; 0x22
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e86:	f7fe fe31 	bl	8001aec <HAL_GetTick>
 8002e8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea0:	d108      	bne.n	8002eb4 <HAL_UART_Receive+0x72>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	e003      	b.n	8002ebc <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ebc:	e043      	b.n	8002f46 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2120      	movs	r1, #32
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f84c 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e042      	b.n	8002f5e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	3302      	adds	r3, #2
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e01f      	b.n	8002f38 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f00:	d007      	beq.n	8002f12 <HAL_UART_Receive+0xd0>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10a      	bne.n	8002f20 <HAL_UART_Receive+0xde>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	e008      	b.n	8002f32 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3301      	adds	r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1b6      	bne.n	8002ebe <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e000      	b.n	8002f5e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
  }
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b090      	sub	sp, #64	; 0x40
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f76:	e050      	b.n	800301a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d04c      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f86:	f7fe fdb1 	bl	8001aec <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d241      	bcs.n	800301a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	330c      	adds	r3, #12
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	e853 3f00 	ldrex	r3, [r3]
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	330c      	adds	r3, #12
 8002fb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fb6:	637a      	str	r2, [r7, #52]	; 0x34
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e5      	bne.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3314      	adds	r3, #20
 8002fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3314      	adds	r3, #20
 8002fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fea:	623a      	str	r2, [r7, #32]
 8002fec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	69f9      	ldr	r1, [r7, #28]
 8002ff0:	6a3a      	ldr	r2, [r7, #32]
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e5      	bne.n	8002fca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e00f      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4013      	ands	r3, r2
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	429a      	cmp	r2, r3
 8003028:	bf0c      	ite	eq
 800302a:	2301      	moveq	r3, #1
 800302c:	2300      	movne	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	429a      	cmp	r2, r3
 8003036:	d09f      	beq.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3740      	adds	r7, #64	; 0x40
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800307e:	f023 030c 	bic.w	r3, r3, #12
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	430b      	orrs	r3, r1
 800308a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a2c      	ldr	r2, [pc, #176]	; (8003158 <UART_SetConfig+0x114>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d103      	bne.n	80030b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030ac:	f7ff fdc4 	bl	8002c38 <HAL_RCC_GetPCLK2Freq>
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	e002      	b.n	80030ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030b4:	f7ff fdac 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 80030b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	009a      	lsls	r2, r3, #2
 80030c4:	441a      	add	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	4a22      	ldr	r2, [pc, #136]	; (800315c <UART_SetConfig+0x118>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	0119      	lsls	r1, r3, #4
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	009a      	lsls	r2, r3, #2
 80030e4:	441a      	add	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <UART_SetConfig+0x118>)
 80030f2:	fba3 0302 	umull	r0, r3, r3, r2
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2064      	movs	r0, #100	; 0x64
 80030fa:	fb00 f303 	mul.w	r3, r0, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	3332      	adds	r3, #50	; 0x32
 8003104:	4a15      	ldr	r2, [pc, #84]	; (800315c <UART_SetConfig+0x118>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003110:	4419      	add	r1, r3
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	009a      	lsls	r2, r3, #2
 800311c:	441a      	add	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	fbb2 f2f3 	udiv	r2, r2, r3
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <UART_SetConfig+0x118>)
 800312a:	fba3 0302 	umull	r0, r3, r3, r2
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2064      	movs	r0, #100	; 0x64
 8003132:	fb00 f303 	mul.w	r3, r0, r3
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	3332      	adds	r3, #50	; 0x32
 800313c:	4a07      	ldr	r2, [pc, #28]	; (800315c <UART_SetConfig+0x118>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	f003 020f 	and.w	r2, r3, #15
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	440a      	add	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40013800 	.word	0x40013800
 800315c:	51eb851f 	.word	0x51eb851f

08003160 <__errno>:
 8003160:	4b01      	ldr	r3, [pc, #4]	; (8003168 <__errno+0x8>)
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000020 	.word	0x20000020

0800316c <__libc_init_array>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	2600      	movs	r6, #0
 8003170:	4d0c      	ldr	r5, [pc, #48]	; (80031a4 <__libc_init_array+0x38>)
 8003172:	4c0d      	ldr	r4, [pc, #52]	; (80031a8 <__libc_init_array+0x3c>)
 8003174:	1b64      	subs	r4, r4, r5
 8003176:	10a4      	asrs	r4, r4, #2
 8003178:	42a6      	cmp	r6, r4
 800317a:	d109      	bne.n	8003190 <__libc_init_array+0x24>
 800317c:	f000 fd36 	bl	8003bec <_init>
 8003180:	2600      	movs	r6, #0
 8003182:	4d0a      	ldr	r5, [pc, #40]	; (80031ac <__libc_init_array+0x40>)
 8003184:	4c0a      	ldr	r4, [pc, #40]	; (80031b0 <__libc_init_array+0x44>)
 8003186:	1b64      	subs	r4, r4, r5
 8003188:	10a4      	asrs	r4, r4, #2
 800318a:	42a6      	cmp	r6, r4
 800318c:	d105      	bne.n	800319a <__libc_init_array+0x2e>
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	f855 3b04 	ldr.w	r3, [r5], #4
 8003194:	4798      	blx	r3
 8003196:	3601      	adds	r6, #1
 8003198:	e7ee      	b.n	8003178 <__libc_init_array+0xc>
 800319a:	f855 3b04 	ldr.w	r3, [r5], #4
 800319e:	4798      	blx	r3
 80031a0:	3601      	adds	r6, #1
 80031a2:	e7f2      	b.n	800318a <__libc_init_array+0x1e>
 80031a4:	08003ee0 	.word	0x08003ee0
 80031a8:	08003ee0 	.word	0x08003ee0
 80031ac:	08003ee0 	.word	0x08003ee0
 80031b0:	08003ee4 	.word	0x08003ee4

080031b4 <memcmp>:
 80031b4:	b510      	push	{r4, lr}
 80031b6:	3901      	subs	r1, #1
 80031b8:	4402      	add	r2, r0
 80031ba:	4290      	cmp	r0, r2
 80031bc:	d101      	bne.n	80031c2 <memcmp+0xe>
 80031be:	2000      	movs	r0, #0
 80031c0:	e005      	b.n	80031ce <memcmp+0x1a>
 80031c2:	7803      	ldrb	r3, [r0, #0]
 80031c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80031c8:	42a3      	cmp	r3, r4
 80031ca:	d001      	beq.n	80031d0 <memcmp+0x1c>
 80031cc:	1b18      	subs	r0, r3, r4
 80031ce:	bd10      	pop	{r4, pc}
 80031d0:	3001      	adds	r0, #1
 80031d2:	e7f2      	b.n	80031ba <memcmp+0x6>

080031d4 <memcpy>:
 80031d4:	440a      	add	r2, r1
 80031d6:	4291      	cmp	r1, r2
 80031d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80031dc:	d100      	bne.n	80031e0 <memcpy+0xc>
 80031de:	4770      	bx	lr
 80031e0:	b510      	push	{r4, lr}
 80031e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031e6:	4291      	cmp	r1, r2
 80031e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031ec:	d1f9      	bne.n	80031e2 <memcpy+0xe>
 80031ee:	bd10      	pop	{r4, pc}

080031f0 <memset>:
 80031f0:	4603      	mov	r3, r0
 80031f2:	4402      	add	r2, r0
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d100      	bne.n	80031fa <memset+0xa>
 80031f8:	4770      	bx	lr
 80031fa:	f803 1b01 	strb.w	r1, [r3], #1
 80031fe:	e7f9      	b.n	80031f4 <memset+0x4>

08003200 <_puts_r>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	460e      	mov	r6, r1
 8003204:	4605      	mov	r5, r0
 8003206:	b118      	cbz	r0, 8003210 <_puts_r+0x10>
 8003208:	6983      	ldr	r3, [r0, #24]
 800320a:	b90b      	cbnz	r3, 8003210 <_puts_r+0x10>
 800320c:	f000 fa44 	bl	8003698 <__sinit>
 8003210:	69ab      	ldr	r3, [r5, #24]
 8003212:	68ac      	ldr	r4, [r5, #8]
 8003214:	b913      	cbnz	r3, 800321c <_puts_r+0x1c>
 8003216:	4628      	mov	r0, r5
 8003218:	f000 fa3e 	bl	8003698 <__sinit>
 800321c:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <_puts_r+0xd0>)
 800321e:	429c      	cmp	r4, r3
 8003220:	d120      	bne.n	8003264 <_puts_r+0x64>
 8003222:	686c      	ldr	r4, [r5, #4]
 8003224:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003226:	07db      	lsls	r3, r3, #31
 8003228:	d405      	bmi.n	8003236 <_puts_r+0x36>
 800322a:	89a3      	ldrh	r3, [r4, #12]
 800322c:	0598      	lsls	r0, r3, #22
 800322e:	d402      	bmi.n	8003236 <_puts_r+0x36>
 8003230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003232:	f000 facf 	bl	80037d4 <__retarget_lock_acquire_recursive>
 8003236:	89a3      	ldrh	r3, [r4, #12]
 8003238:	0719      	lsls	r1, r3, #28
 800323a:	d51d      	bpl.n	8003278 <_puts_r+0x78>
 800323c:	6923      	ldr	r3, [r4, #16]
 800323e:	b1db      	cbz	r3, 8003278 <_puts_r+0x78>
 8003240:	3e01      	subs	r6, #1
 8003242:	68a3      	ldr	r3, [r4, #8]
 8003244:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003248:	3b01      	subs	r3, #1
 800324a:	60a3      	str	r3, [r4, #8]
 800324c:	bb39      	cbnz	r1, 800329e <_puts_r+0x9e>
 800324e:	2b00      	cmp	r3, #0
 8003250:	da38      	bge.n	80032c4 <_puts_r+0xc4>
 8003252:	4622      	mov	r2, r4
 8003254:	210a      	movs	r1, #10
 8003256:	4628      	mov	r0, r5
 8003258:	f000 f848 	bl	80032ec <__swbuf_r>
 800325c:	3001      	adds	r0, #1
 800325e:	d011      	beq.n	8003284 <_puts_r+0x84>
 8003260:	250a      	movs	r5, #10
 8003262:	e011      	b.n	8003288 <_puts_r+0x88>
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <_puts_r+0xd4>)
 8003266:	429c      	cmp	r4, r3
 8003268:	d101      	bne.n	800326e <_puts_r+0x6e>
 800326a:	68ac      	ldr	r4, [r5, #8]
 800326c:	e7da      	b.n	8003224 <_puts_r+0x24>
 800326e:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <_puts_r+0xd8>)
 8003270:	429c      	cmp	r4, r3
 8003272:	bf08      	it	eq
 8003274:	68ec      	ldreq	r4, [r5, #12]
 8003276:	e7d5      	b.n	8003224 <_puts_r+0x24>
 8003278:	4621      	mov	r1, r4
 800327a:	4628      	mov	r0, r5
 800327c:	f000 f888 	bl	8003390 <__swsetup_r>
 8003280:	2800      	cmp	r0, #0
 8003282:	d0dd      	beq.n	8003240 <_puts_r+0x40>
 8003284:	f04f 35ff 	mov.w	r5, #4294967295
 8003288:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800328a:	07da      	lsls	r2, r3, #31
 800328c:	d405      	bmi.n	800329a <_puts_r+0x9a>
 800328e:	89a3      	ldrh	r3, [r4, #12]
 8003290:	059b      	lsls	r3, r3, #22
 8003292:	d402      	bmi.n	800329a <_puts_r+0x9a>
 8003294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003296:	f000 fa9e 	bl	80037d6 <__retarget_lock_release_recursive>
 800329a:	4628      	mov	r0, r5
 800329c:	bd70      	pop	{r4, r5, r6, pc}
 800329e:	2b00      	cmp	r3, #0
 80032a0:	da04      	bge.n	80032ac <_puts_r+0xac>
 80032a2:	69a2      	ldr	r2, [r4, #24]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	dc06      	bgt.n	80032b6 <_puts_r+0xb6>
 80032a8:	290a      	cmp	r1, #10
 80032aa:	d004      	beq.n	80032b6 <_puts_r+0xb6>
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	6022      	str	r2, [r4, #0]
 80032b2:	7019      	strb	r1, [r3, #0]
 80032b4:	e7c5      	b.n	8003242 <_puts_r+0x42>
 80032b6:	4622      	mov	r2, r4
 80032b8:	4628      	mov	r0, r5
 80032ba:	f000 f817 	bl	80032ec <__swbuf_r>
 80032be:	3001      	adds	r0, #1
 80032c0:	d1bf      	bne.n	8003242 <_puts_r+0x42>
 80032c2:	e7df      	b.n	8003284 <_puts_r+0x84>
 80032c4:	250a      	movs	r5, #10
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	6022      	str	r2, [r4, #0]
 80032cc:	701d      	strb	r5, [r3, #0]
 80032ce:	e7db      	b.n	8003288 <_puts_r+0x88>
 80032d0:	08003e98 	.word	0x08003e98
 80032d4:	08003eb8 	.word	0x08003eb8
 80032d8:	08003e78 	.word	0x08003e78

080032dc <puts>:
 80032dc:	4b02      	ldr	r3, [pc, #8]	; (80032e8 <puts+0xc>)
 80032de:	4601      	mov	r1, r0
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	f7ff bf8d 	b.w	8003200 <_puts_r>
 80032e6:	bf00      	nop
 80032e8:	20000020 	.word	0x20000020

080032ec <__swbuf_r>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	460e      	mov	r6, r1
 80032f0:	4614      	mov	r4, r2
 80032f2:	4605      	mov	r5, r0
 80032f4:	b118      	cbz	r0, 80032fe <__swbuf_r+0x12>
 80032f6:	6983      	ldr	r3, [r0, #24]
 80032f8:	b90b      	cbnz	r3, 80032fe <__swbuf_r+0x12>
 80032fa:	f000 f9cd 	bl	8003698 <__sinit>
 80032fe:	4b21      	ldr	r3, [pc, #132]	; (8003384 <__swbuf_r+0x98>)
 8003300:	429c      	cmp	r4, r3
 8003302:	d12b      	bne.n	800335c <__swbuf_r+0x70>
 8003304:	686c      	ldr	r4, [r5, #4]
 8003306:	69a3      	ldr	r3, [r4, #24]
 8003308:	60a3      	str	r3, [r4, #8]
 800330a:	89a3      	ldrh	r3, [r4, #12]
 800330c:	071a      	lsls	r2, r3, #28
 800330e:	d52f      	bpl.n	8003370 <__swbuf_r+0x84>
 8003310:	6923      	ldr	r3, [r4, #16]
 8003312:	b36b      	cbz	r3, 8003370 <__swbuf_r+0x84>
 8003314:	6923      	ldr	r3, [r4, #16]
 8003316:	6820      	ldr	r0, [r4, #0]
 8003318:	b2f6      	uxtb	r6, r6
 800331a:	1ac0      	subs	r0, r0, r3
 800331c:	6963      	ldr	r3, [r4, #20]
 800331e:	4637      	mov	r7, r6
 8003320:	4283      	cmp	r3, r0
 8003322:	dc04      	bgt.n	800332e <__swbuf_r+0x42>
 8003324:	4621      	mov	r1, r4
 8003326:	4628      	mov	r0, r5
 8003328:	f000 f922 	bl	8003570 <_fflush_r>
 800332c:	bb30      	cbnz	r0, 800337c <__swbuf_r+0x90>
 800332e:	68a3      	ldr	r3, [r4, #8]
 8003330:	3001      	adds	r0, #1
 8003332:	3b01      	subs	r3, #1
 8003334:	60a3      	str	r3, [r4, #8]
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	6022      	str	r2, [r4, #0]
 800333c:	701e      	strb	r6, [r3, #0]
 800333e:	6963      	ldr	r3, [r4, #20]
 8003340:	4283      	cmp	r3, r0
 8003342:	d004      	beq.n	800334e <__swbuf_r+0x62>
 8003344:	89a3      	ldrh	r3, [r4, #12]
 8003346:	07db      	lsls	r3, r3, #31
 8003348:	d506      	bpl.n	8003358 <__swbuf_r+0x6c>
 800334a:	2e0a      	cmp	r6, #10
 800334c:	d104      	bne.n	8003358 <__swbuf_r+0x6c>
 800334e:	4621      	mov	r1, r4
 8003350:	4628      	mov	r0, r5
 8003352:	f000 f90d 	bl	8003570 <_fflush_r>
 8003356:	b988      	cbnz	r0, 800337c <__swbuf_r+0x90>
 8003358:	4638      	mov	r0, r7
 800335a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <__swbuf_r+0x9c>)
 800335e:	429c      	cmp	r4, r3
 8003360:	d101      	bne.n	8003366 <__swbuf_r+0x7a>
 8003362:	68ac      	ldr	r4, [r5, #8]
 8003364:	e7cf      	b.n	8003306 <__swbuf_r+0x1a>
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <__swbuf_r+0xa0>)
 8003368:	429c      	cmp	r4, r3
 800336a:	bf08      	it	eq
 800336c:	68ec      	ldreq	r4, [r5, #12]
 800336e:	e7ca      	b.n	8003306 <__swbuf_r+0x1a>
 8003370:	4621      	mov	r1, r4
 8003372:	4628      	mov	r0, r5
 8003374:	f000 f80c 	bl	8003390 <__swsetup_r>
 8003378:	2800      	cmp	r0, #0
 800337a:	d0cb      	beq.n	8003314 <__swbuf_r+0x28>
 800337c:	f04f 37ff 	mov.w	r7, #4294967295
 8003380:	e7ea      	b.n	8003358 <__swbuf_r+0x6c>
 8003382:	bf00      	nop
 8003384:	08003e98 	.word	0x08003e98
 8003388:	08003eb8 	.word	0x08003eb8
 800338c:	08003e78 	.word	0x08003e78

08003390 <__swsetup_r>:
 8003390:	4b32      	ldr	r3, [pc, #200]	; (800345c <__swsetup_r+0xcc>)
 8003392:	b570      	push	{r4, r5, r6, lr}
 8003394:	681d      	ldr	r5, [r3, #0]
 8003396:	4606      	mov	r6, r0
 8003398:	460c      	mov	r4, r1
 800339a:	b125      	cbz	r5, 80033a6 <__swsetup_r+0x16>
 800339c:	69ab      	ldr	r3, [r5, #24]
 800339e:	b913      	cbnz	r3, 80033a6 <__swsetup_r+0x16>
 80033a0:	4628      	mov	r0, r5
 80033a2:	f000 f979 	bl	8003698 <__sinit>
 80033a6:	4b2e      	ldr	r3, [pc, #184]	; (8003460 <__swsetup_r+0xd0>)
 80033a8:	429c      	cmp	r4, r3
 80033aa:	d10f      	bne.n	80033cc <__swsetup_r+0x3c>
 80033ac:	686c      	ldr	r4, [r5, #4]
 80033ae:	89a3      	ldrh	r3, [r4, #12]
 80033b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033b4:	0719      	lsls	r1, r3, #28
 80033b6:	d42c      	bmi.n	8003412 <__swsetup_r+0x82>
 80033b8:	06dd      	lsls	r5, r3, #27
 80033ba:	d411      	bmi.n	80033e0 <__swsetup_r+0x50>
 80033bc:	2309      	movs	r3, #9
 80033be:	6033      	str	r3, [r6, #0]
 80033c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	81a3      	strh	r3, [r4, #12]
 80033ca:	e03e      	b.n	800344a <__swsetup_r+0xba>
 80033cc:	4b25      	ldr	r3, [pc, #148]	; (8003464 <__swsetup_r+0xd4>)
 80033ce:	429c      	cmp	r4, r3
 80033d0:	d101      	bne.n	80033d6 <__swsetup_r+0x46>
 80033d2:	68ac      	ldr	r4, [r5, #8]
 80033d4:	e7eb      	b.n	80033ae <__swsetup_r+0x1e>
 80033d6:	4b24      	ldr	r3, [pc, #144]	; (8003468 <__swsetup_r+0xd8>)
 80033d8:	429c      	cmp	r4, r3
 80033da:	bf08      	it	eq
 80033dc:	68ec      	ldreq	r4, [r5, #12]
 80033de:	e7e6      	b.n	80033ae <__swsetup_r+0x1e>
 80033e0:	0758      	lsls	r0, r3, #29
 80033e2:	d512      	bpl.n	800340a <__swsetup_r+0x7a>
 80033e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033e6:	b141      	cbz	r1, 80033fa <__swsetup_r+0x6a>
 80033e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033ec:	4299      	cmp	r1, r3
 80033ee:	d002      	beq.n	80033f6 <__swsetup_r+0x66>
 80033f0:	4630      	mov	r0, r6
 80033f2:	f000 fa57 	bl	80038a4 <_free_r>
 80033f6:	2300      	movs	r3, #0
 80033f8:	6363      	str	r3, [r4, #52]	; 0x34
 80033fa:	89a3      	ldrh	r3, [r4, #12]
 80033fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003400:	81a3      	strh	r3, [r4, #12]
 8003402:	2300      	movs	r3, #0
 8003404:	6063      	str	r3, [r4, #4]
 8003406:	6923      	ldr	r3, [r4, #16]
 8003408:	6023      	str	r3, [r4, #0]
 800340a:	89a3      	ldrh	r3, [r4, #12]
 800340c:	f043 0308 	orr.w	r3, r3, #8
 8003410:	81a3      	strh	r3, [r4, #12]
 8003412:	6923      	ldr	r3, [r4, #16]
 8003414:	b94b      	cbnz	r3, 800342a <__swsetup_r+0x9a>
 8003416:	89a3      	ldrh	r3, [r4, #12]
 8003418:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800341c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003420:	d003      	beq.n	800342a <__swsetup_r+0x9a>
 8003422:	4621      	mov	r1, r4
 8003424:	4630      	mov	r0, r6
 8003426:	f000 f9fd 	bl	8003824 <__smakebuf_r>
 800342a:	89a0      	ldrh	r0, [r4, #12]
 800342c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003430:	f010 0301 	ands.w	r3, r0, #1
 8003434:	d00a      	beq.n	800344c <__swsetup_r+0xbc>
 8003436:	2300      	movs	r3, #0
 8003438:	60a3      	str	r3, [r4, #8]
 800343a:	6963      	ldr	r3, [r4, #20]
 800343c:	425b      	negs	r3, r3
 800343e:	61a3      	str	r3, [r4, #24]
 8003440:	6923      	ldr	r3, [r4, #16]
 8003442:	b943      	cbnz	r3, 8003456 <__swsetup_r+0xc6>
 8003444:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003448:	d1ba      	bne.n	80033c0 <__swsetup_r+0x30>
 800344a:	bd70      	pop	{r4, r5, r6, pc}
 800344c:	0781      	lsls	r1, r0, #30
 800344e:	bf58      	it	pl
 8003450:	6963      	ldrpl	r3, [r4, #20]
 8003452:	60a3      	str	r3, [r4, #8]
 8003454:	e7f4      	b.n	8003440 <__swsetup_r+0xb0>
 8003456:	2000      	movs	r0, #0
 8003458:	e7f7      	b.n	800344a <__swsetup_r+0xba>
 800345a:	bf00      	nop
 800345c:	20000020 	.word	0x20000020
 8003460:	08003e98 	.word	0x08003e98
 8003464:	08003eb8 	.word	0x08003eb8
 8003468:	08003e78 	.word	0x08003e78

0800346c <__sflush_r>:
 800346c:	898a      	ldrh	r2, [r1, #12]
 800346e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003470:	4605      	mov	r5, r0
 8003472:	0710      	lsls	r0, r2, #28
 8003474:	460c      	mov	r4, r1
 8003476:	d457      	bmi.n	8003528 <__sflush_r+0xbc>
 8003478:	684b      	ldr	r3, [r1, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	dc04      	bgt.n	8003488 <__sflush_r+0x1c>
 800347e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	dc01      	bgt.n	8003488 <__sflush_r+0x1c>
 8003484:	2000      	movs	r0, #0
 8003486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800348a:	2e00      	cmp	r6, #0
 800348c:	d0fa      	beq.n	8003484 <__sflush_r+0x18>
 800348e:	2300      	movs	r3, #0
 8003490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003494:	682f      	ldr	r7, [r5, #0]
 8003496:	602b      	str	r3, [r5, #0]
 8003498:	d032      	beq.n	8003500 <__sflush_r+0x94>
 800349a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800349c:	89a3      	ldrh	r3, [r4, #12]
 800349e:	075a      	lsls	r2, r3, #29
 80034a0:	d505      	bpl.n	80034ae <__sflush_r+0x42>
 80034a2:	6863      	ldr	r3, [r4, #4]
 80034a4:	1ac0      	subs	r0, r0, r3
 80034a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034a8:	b10b      	cbz	r3, 80034ae <__sflush_r+0x42>
 80034aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034ac:	1ac0      	subs	r0, r0, r3
 80034ae:	2300      	movs	r3, #0
 80034b0:	4602      	mov	r2, r0
 80034b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034b4:	4628      	mov	r0, r5
 80034b6:	6a21      	ldr	r1, [r4, #32]
 80034b8:	47b0      	blx	r6
 80034ba:	1c43      	adds	r3, r0, #1
 80034bc:	89a3      	ldrh	r3, [r4, #12]
 80034be:	d106      	bne.n	80034ce <__sflush_r+0x62>
 80034c0:	6829      	ldr	r1, [r5, #0]
 80034c2:	291d      	cmp	r1, #29
 80034c4:	d82c      	bhi.n	8003520 <__sflush_r+0xb4>
 80034c6:	4a29      	ldr	r2, [pc, #164]	; (800356c <__sflush_r+0x100>)
 80034c8:	40ca      	lsrs	r2, r1
 80034ca:	07d6      	lsls	r6, r2, #31
 80034cc:	d528      	bpl.n	8003520 <__sflush_r+0xb4>
 80034ce:	2200      	movs	r2, #0
 80034d0:	6062      	str	r2, [r4, #4]
 80034d2:	6922      	ldr	r2, [r4, #16]
 80034d4:	04d9      	lsls	r1, r3, #19
 80034d6:	6022      	str	r2, [r4, #0]
 80034d8:	d504      	bpl.n	80034e4 <__sflush_r+0x78>
 80034da:	1c42      	adds	r2, r0, #1
 80034dc:	d101      	bne.n	80034e2 <__sflush_r+0x76>
 80034de:	682b      	ldr	r3, [r5, #0]
 80034e0:	b903      	cbnz	r3, 80034e4 <__sflush_r+0x78>
 80034e2:	6560      	str	r0, [r4, #84]	; 0x54
 80034e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034e6:	602f      	str	r7, [r5, #0]
 80034e8:	2900      	cmp	r1, #0
 80034ea:	d0cb      	beq.n	8003484 <__sflush_r+0x18>
 80034ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034f0:	4299      	cmp	r1, r3
 80034f2:	d002      	beq.n	80034fa <__sflush_r+0x8e>
 80034f4:	4628      	mov	r0, r5
 80034f6:	f000 f9d5 	bl	80038a4 <_free_r>
 80034fa:	2000      	movs	r0, #0
 80034fc:	6360      	str	r0, [r4, #52]	; 0x34
 80034fe:	e7c2      	b.n	8003486 <__sflush_r+0x1a>
 8003500:	6a21      	ldr	r1, [r4, #32]
 8003502:	2301      	movs	r3, #1
 8003504:	4628      	mov	r0, r5
 8003506:	47b0      	blx	r6
 8003508:	1c41      	adds	r1, r0, #1
 800350a:	d1c7      	bne.n	800349c <__sflush_r+0x30>
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0c4      	beq.n	800349c <__sflush_r+0x30>
 8003512:	2b1d      	cmp	r3, #29
 8003514:	d001      	beq.n	800351a <__sflush_r+0xae>
 8003516:	2b16      	cmp	r3, #22
 8003518:	d101      	bne.n	800351e <__sflush_r+0xb2>
 800351a:	602f      	str	r7, [r5, #0]
 800351c:	e7b2      	b.n	8003484 <__sflush_r+0x18>
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003524:	81a3      	strh	r3, [r4, #12]
 8003526:	e7ae      	b.n	8003486 <__sflush_r+0x1a>
 8003528:	690f      	ldr	r7, [r1, #16]
 800352a:	2f00      	cmp	r7, #0
 800352c:	d0aa      	beq.n	8003484 <__sflush_r+0x18>
 800352e:	0793      	lsls	r3, r2, #30
 8003530:	bf18      	it	ne
 8003532:	2300      	movne	r3, #0
 8003534:	680e      	ldr	r6, [r1, #0]
 8003536:	bf08      	it	eq
 8003538:	694b      	ldreq	r3, [r1, #20]
 800353a:	1bf6      	subs	r6, r6, r7
 800353c:	600f      	str	r7, [r1, #0]
 800353e:	608b      	str	r3, [r1, #8]
 8003540:	2e00      	cmp	r6, #0
 8003542:	dd9f      	ble.n	8003484 <__sflush_r+0x18>
 8003544:	4633      	mov	r3, r6
 8003546:	463a      	mov	r2, r7
 8003548:	4628      	mov	r0, r5
 800354a:	6a21      	ldr	r1, [r4, #32]
 800354c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003550:	47e0      	blx	ip
 8003552:	2800      	cmp	r0, #0
 8003554:	dc06      	bgt.n	8003564 <__sflush_r+0xf8>
 8003556:	89a3      	ldrh	r3, [r4, #12]
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003560:	81a3      	strh	r3, [r4, #12]
 8003562:	e790      	b.n	8003486 <__sflush_r+0x1a>
 8003564:	4407      	add	r7, r0
 8003566:	1a36      	subs	r6, r6, r0
 8003568:	e7ea      	b.n	8003540 <__sflush_r+0xd4>
 800356a:	bf00      	nop
 800356c:	20400001 	.word	0x20400001

08003570 <_fflush_r>:
 8003570:	b538      	push	{r3, r4, r5, lr}
 8003572:	690b      	ldr	r3, [r1, #16]
 8003574:	4605      	mov	r5, r0
 8003576:	460c      	mov	r4, r1
 8003578:	b913      	cbnz	r3, 8003580 <_fflush_r+0x10>
 800357a:	2500      	movs	r5, #0
 800357c:	4628      	mov	r0, r5
 800357e:	bd38      	pop	{r3, r4, r5, pc}
 8003580:	b118      	cbz	r0, 800358a <_fflush_r+0x1a>
 8003582:	6983      	ldr	r3, [r0, #24]
 8003584:	b90b      	cbnz	r3, 800358a <_fflush_r+0x1a>
 8003586:	f000 f887 	bl	8003698 <__sinit>
 800358a:	4b14      	ldr	r3, [pc, #80]	; (80035dc <_fflush_r+0x6c>)
 800358c:	429c      	cmp	r4, r3
 800358e:	d11b      	bne.n	80035c8 <_fflush_r+0x58>
 8003590:	686c      	ldr	r4, [r5, #4]
 8003592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0ef      	beq.n	800357a <_fflush_r+0xa>
 800359a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800359c:	07d0      	lsls	r0, r2, #31
 800359e:	d404      	bmi.n	80035aa <_fflush_r+0x3a>
 80035a0:	0599      	lsls	r1, r3, #22
 80035a2:	d402      	bmi.n	80035aa <_fflush_r+0x3a>
 80035a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035a6:	f000 f915 	bl	80037d4 <__retarget_lock_acquire_recursive>
 80035aa:	4628      	mov	r0, r5
 80035ac:	4621      	mov	r1, r4
 80035ae:	f7ff ff5d 	bl	800346c <__sflush_r>
 80035b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035b4:	4605      	mov	r5, r0
 80035b6:	07da      	lsls	r2, r3, #31
 80035b8:	d4e0      	bmi.n	800357c <_fflush_r+0xc>
 80035ba:	89a3      	ldrh	r3, [r4, #12]
 80035bc:	059b      	lsls	r3, r3, #22
 80035be:	d4dd      	bmi.n	800357c <_fflush_r+0xc>
 80035c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035c2:	f000 f908 	bl	80037d6 <__retarget_lock_release_recursive>
 80035c6:	e7d9      	b.n	800357c <_fflush_r+0xc>
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <_fflush_r+0x70>)
 80035ca:	429c      	cmp	r4, r3
 80035cc:	d101      	bne.n	80035d2 <_fflush_r+0x62>
 80035ce:	68ac      	ldr	r4, [r5, #8]
 80035d0:	e7df      	b.n	8003592 <_fflush_r+0x22>
 80035d2:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <_fflush_r+0x74>)
 80035d4:	429c      	cmp	r4, r3
 80035d6:	bf08      	it	eq
 80035d8:	68ec      	ldreq	r4, [r5, #12]
 80035da:	e7da      	b.n	8003592 <_fflush_r+0x22>
 80035dc:	08003e98 	.word	0x08003e98
 80035e0:	08003eb8 	.word	0x08003eb8
 80035e4:	08003e78 	.word	0x08003e78

080035e8 <std>:
 80035e8:	2300      	movs	r3, #0
 80035ea:	b510      	push	{r4, lr}
 80035ec:	4604      	mov	r4, r0
 80035ee:	e9c0 3300 	strd	r3, r3, [r0]
 80035f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035f6:	6083      	str	r3, [r0, #8]
 80035f8:	8181      	strh	r1, [r0, #12]
 80035fa:	6643      	str	r3, [r0, #100]	; 0x64
 80035fc:	81c2      	strh	r2, [r0, #14]
 80035fe:	6183      	str	r3, [r0, #24]
 8003600:	4619      	mov	r1, r3
 8003602:	2208      	movs	r2, #8
 8003604:	305c      	adds	r0, #92	; 0x5c
 8003606:	f7ff fdf3 	bl	80031f0 <memset>
 800360a:	4b05      	ldr	r3, [pc, #20]	; (8003620 <std+0x38>)
 800360c:	6224      	str	r4, [r4, #32]
 800360e:	6263      	str	r3, [r4, #36]	; 0x24
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <std+0x3c>)
 8003612:	62a3      	str	r3, [r4, #40]	; 0x28
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <std+0x40>)
 8003616:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <std+0x44>)
 800361a:	6323      	str	r3, [r4, #48]	; 0x30
 800361c:	bd10      	pop	{r4, pc}
 800361e:	bf00      	nop
 8003620:	08003a7d 	.word	0x08003a7d
 8003624:	08003a9f 	.word	0x08003a9f
 8003628:	08003ad7 	.word	0x08003ad7
 800362c:	08003afb 	.word	0x08003afb

08003630 <_cleanup_r>:
 8003630:	4901      	ldr	r1, [pc, #4]	; (8003638 <_cleanup_r+0x8>)
 8003632:	f000 b8af 	b.w	8003794 <_fwalk_reent>
 8003636:	bf00      	nop
 8003638:	08003571 	.word	0x08003571

0800363c <__sfmoreglue>:
 800363c:	2268      	movs	r2, #104	; 0x68
 800363e:	b570      	push	{r4, r5, r6, lr}
 8003640:	1e4d      	subs	r5, r1, #1
 8003642:	4355      	muls	r5, r2
 8003644:	460e      	mov	r6, r1
 8003646:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800364a:	f000 f993 	bl	8003974 <_malloc_r>
 800364e:	4604      	mov	r4, r0
 8003650:	b140      	cbz	r0, 8003664 <__sfmoreglue+0x28>
 8003652:	2100      	movs	r1, #0
 8003654:	e9c0 1600 	strd	r1, r6, [r0]
 8003658:	300c      	adds	r0, #12
 800365a:	60a0      	str	r0, [r4, #8]
 800365c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003660:	f7ff fdc6 	bl	80031f0 <memset>
 8003664:	4620      	mov	r0, r4
 8003666:	bd70      	pop	{r4, r5, r6, pc}

08003668 <__sfp_lock_acquire>:
 8003668:	4801      	ldr	r0, [pc, #4]	; (8003670 <__sfp_lock_acquire+0x8>)
 800366a:	f000 b8b3 	b.w	80037d4 <__retarget_lock_acquire_recursive>
 800366e:	bf00      	nop
 8003670:	200002b1 	.word	0x200002b1

08003674 <__sfp_lock_release>:
 8003674:	4801      	ldr	r0, [pc, #4]	; (800367c <__sfp_lock_release+0x8>)
 8003676:	f000 b8ae 	b.w	80037d6 <__retarget_lock_release_recursive>
 800367a:	bf00      	nop
 800367c:	200002b1 	.word	0x200002b1

08003680 <__sinit_lock_acquire>:
 8003680:	4801      	ldr	r0, [pc, #4]	; (8003688 <__sinit_lock_acquire+0x8>)
 8003682:	f000 b8a7 	b.w	80037d4 <__retarget_lock_acquire_recursive>
 8003686:	bf00      	nop
 8003688:	200002b2 	.word	0x200002b2

0800368c <__sinit_lock_release>:
 800368c:	4801      	ldr	r0, [pc, #4]	; (8003694 <__sinit_lock_release+0x8>)
 800368e:	f000 b8a2 	b.w	80037d6 <__retarget_lock_release_recursive>
 8003692:	bf00      	nop
 8003694:	200002b2 	.word	0x200002b2

08003698 <__sinit>:
 8003698:	b510      	push	{r4, lr}
 800369a:	4604      	mov	r4, r0
 800369c:	f7ff fff0 	bl	8003680 <__sinit_lock_acquire>
 80036a0:	69a3      	ldr	r3, [r4, #24]
 80036a2:	b11b      	cbz	r3, 80036ac <__sinit+0x14>
 80036a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036a8:	f7ff bff0 	b.w	800368c <__sinit_lock_release>
 80036ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036b0:	6523      	str	r3, [r4, #80]	; 0x50
 80036b2:	4b13      	ldr	r3, [pc, #76]	; (8003700 <__sinit+0x68>)
 80036b4:	4a13      	ldr	r2, [pc, #76]	; (8003704 <__sinit+0x6c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80036ba:	42a3      	cmp	r3, r4
 80036bc:	bf08      	it	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	4620      	mov	r0, r4
 80036c2:	bf08      	it	eq
 80036c4:	61a3      	streq	r3, [r4, #24]
 80036c6:	f000 f81f 	bl	8003708 <__sfp>
 80036ca:	6060      	str	r0, [r4, #4]
 80036cc:	4620      	mov	r0, r4
 80036ce:	f000 f81b 	bl	8003708 <__sfp>
 80036d2:	60a0      	str	r0, [r4, #8]
 80036d4:	4620      	mov	r0, r4
 80036d6:	f000 f817 	bl	8003708 <__sfp>
 80036da:	2200      	movs	r2, #0
 80036dc:	2104      	movs	r1, #4
 80036de:	60e0      	str	r0, [r4, #12]
 80036e0:	6860      	ldr	r0, [r4, #4]
 80036e2:	f7ff ff81 	bl	80035e8 <std>
 80036e6:	2201      	movs	r2, #1
 80036e8:	2109      	movs	r1, #9
 80036ea:	68a0      	ldr	r0, [r4, #8]
 80036ec:	f7ff ff7c 	bl	80035e8 <std>
 80036f0:	2202      	movs	r2, #2
 80036f2:	2112      	movs	r1, #18
 80036f4:	68e0      	ldr	r0, [r4, #12]
 80036f6:	f7ff ff77 	bl	80035e8 <std>
 80036fa:	2301      	movs	r3, #1
 80036fc:	61a3      	str	r3, [r4, #24]
 80036fe:	e7d1      	b.n	80036a4 <__sinit+0xc>
 8003700:	08003e74 	.word	0x08003e74
 8003704:	08003631 	.word	0x08003631

08003708 <__sfp>:
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370a:	4607      	mov	r7, r0
 800370c:	f7ff ffac 	bl	8003668 <__sfp_lock_acquire>
 8003710:	4b1e      	ldr	r3, [pc, #120]	; (800378c <__sfp+0x84>)
 8003712:	681e      	ldr	r6, [r3, #0]
 8003714:	69b3      	ldr	r3, [r6, #24]
 8003716:	b913      	cbnz	r3, 800371e <__sfp+0x16>
 8003718:	4630      	mov	r0, r6
 800371a:	f7ff ffbd 	bl	8003698 <__sinit>
 800371e:	3648      	adds	r6, #72	; 0x48
 8003720:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003724:	3b01      	subs	r3, #1
 8003726:	d503      	bpl.n	8003730 <__sfp+0x28>
 8003728:	6833      	ldr	r3, [r6, #0]
 800372a:	b30b      	cbz	r3, 8003770 <__sfp+0x68>
 800372c:	6836      	ldr	r6, [r6, #0]
 800372e:	e7f7      	b.n	8003720 <__sfp+0x18>
 8003730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003734:	b9d5      	cbnz	r5, 800376c <__sfp+0x64>
 8003736:	4b16      	ldr	r3, [pc, #88]	; (8003790 <__sfp+0x88>)
 8003738:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800373c:	60e3      	str	r3, [r4, #12]
 800373e:	6665      	str	r5, [r4, #100]	; 0x64
 8003740:	f000 f847 	bl	80037d2 <__retarget_lock_init_recursive>
 8003744:	f7ff ff96 	bl	8003674 <__sfp_lock_release>
 8003748:	2208      	movs	r2, #8
 800374a:	4629      	mov	r1, r5
 800374c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003750:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003754:	6025      	str	r5, [r4, #0]
 8003756:	61a5      	str	r5, [r4, #24]
 8003758:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800375c:	f7ff fd48 	bl	80031f0 <memset>
 8003760:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003764:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003768:	4620      	mov	r0, r4
 800376a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800376c:	3468      	adds	r4, #104	; 0x68
 800376e:	e7d9      	b.n	8003724 <__sfp+0x1c>
 8003770:	2104      	movs	r1, #4
 8003772:	4638      	mov	r0, r7
 8003774:	f7ff ff62 	bl	800363c <__sfmoreglue>
 8003778:	4604      	mov	r4, r0
 800377a:	6030      	str	r0, [r6, #0]
 800377c:	2800      	cmp	r0, #0
 800377e:	d1d5      	bne.n	800372c <__sfp+0x24>
 8003780:	f7ff ff78 	bl	8003674 <__sfp_lock_release>
 8003784:	230c      	movs	r3, #12
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	e7ee      	b.n	8003768 <__sfp+0x60>
 800378a:	bf00      	nop
 800378c:	08003e74 	.word	0x08003e74
 8003790:	ffff0001 	.word	0xffff0001

08003794 <_fwalk_reent>:
 8003794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003798:	4606      	mov	r6, r0
 800379a:	4688      	mov	r8, r1
 800379c:	2700      	movs	r7, #0
 800379e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037a6:	f1b9 0901 	subs.w	r9, r9, #1
 80037aa:	d505      	bpl.n	80037b8 <_fwalk_reent+0x24>
 80037ac:	6824      	ldr	r4, [r4, #0]
 80037ae:	2c00      	cmp	r4, #0
 80037b0:	d1f7      	bne.n	80037a2 <_fwalk_reent+0xe>
 80037b2:	4638      	mov	r0, r7
 80037b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037b8:	89ab      	ldrh	r3, [r5, #12]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d907      	bls.n	80037ce <_fwalk_reent+0x3a>
 80037be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037c2:	3301      	adds	r3, #1
 80037c4:	d003      	beq.n	80037ce <_fwalk_reent+0x3a>
 80037c6:	4629      	mov	r1, r5
 80037c8:	4630      	mov	r0, r6
 80037ca:	47c0      	blx	r8
 80037cc:	4307      	orrs	r7, r0
 80037ce:	3568      	adds	r5, #104	; 0x68
 80037d0:	e7e9      	b.n	80037a6 <_fwalk_reent+0x12>

080037d2 <__retarget_lock_init_recursive>:
 80037d2:	4770      	bx	lr

080037d4 <__retarget_lock_acquire_recursive>:
 80037d4:	4770      	bx	lr

080037d6 <__retarget_lock_release_recursive>:
 80037d6:	4770      	bx	lr

080037d8 <__swhatbuf_r>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	460e      	mov	r6, r1
 80037dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e0:	4614      	mov	r4, r2
 80037e2:	2900      	cmp	r1, #0
 80037e4:	461d      	mov	r5, r3
 80037e6:	b096      	sub	sp, #88	; 0x58
 80037e8:	da08      	bge.n	80037fc <__swhatbuf_r+0x24>
 80037ea:	2200      	movs	r2, #0
 80037ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80037f0:	602a      	str	r2, [r5, #0]
 80037f2:	061a      	lsls	r2, r3, #24
 80037f4:	d410      	bmi.n	8003818 <__swhatbuf_r+0x40>
 80037f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037fa:	e00e      	b.n	800381a <__swhatbuf_r+0x42>
 80037fc:	466a      	mov	r2, sp
 80037fe:	f000 f9a3 	bl	8003b48 <_fstat_r>
 8003802:	2800      	cmp	r0, #0
 8003804:	dbf1      	blt.n	80037ea <__swhatbuf_r+0x12>
 8003806:	9a01      	ldr	r2, [sp, #4]
 8003808:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800380c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003810:	425a      	negs	r2, r3
 8003812:	415a      	adcs	r2, r3
 8003814:	602a      	str	r2, [r5, #0]
 8003816:	e7ee      	b.n	80037f6 <__swhatbuf_r+0x1e>
 8003818:	2340      	movs	r3, #64	; 0x40
 800381a:	2000      	movs	r0, #0
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	b016      	add	sp, #88	; 0x58
 8003820:	bd70      	pop	{r4, r5, r6, pc}
	...

08003824 <__smakebuf_r>:
 8003824:	898b      	ldrh	r3, [r1, #12]
 8003826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003828:	079d      	lsls	r5, r3, #30
 800382a:	4606      	mov	r6, r0
 800382c:	460c      	mov	r4, r1
 800382e:	d507      	bpl.n	8003840 <__smakebuf_r+0x1c>
 8003830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003834:	6023      	str	r3, [r4, #0]
 8003836:	6123      	str	r3, [r4, #16]
 8003838:	2301      	movs	r3, #1
 800383a:	6163      	str	r3, [r4, #20]
 800383c:	b002      	add	sp, #8
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	466a      	mov	r2, sp
 8003842:	ab01      	add	r3, sp, #4
 8003844:	f7ff ffc8 	bl	80037d8 <__swhatbuf_r>
 8003848:	9900      	ldr	r1, [sp, #0]
 800384a:	4605      	mov	r5, r0
 800384c:	4630      	mov	r0, r6
 800384e:	f000 f891 	bl	8003974 <_malloc_r>
 8003852:	b948      	cbnz	r0, 8003868 <__smakebuf_r+0x44>
 8003854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003858:	059a      	lsls	r2, r3, #22
 800385a:	d4ef      	bmi.n	800383c <__smakebuf_r+0x18>
 800385c:	f023 0303 	bic.w	r3, r3, #3
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	81a3      	strh	r3, [r4, #12]
 8003866:	e7e3      	b.n	8003830 <__smakebuf_r+0xc>
 8003868:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <__smakebuf_r+0x7c>)
 800386a:	62b3      	str	r3, [r6, #40]	; 0x28
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	6020      	str	r0, [r4, #0]
 8003870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003874:	81a3      	strh	r3, [r4, #12]
 8003876:	9b00      	ldr	r3, [sp, #0]
 8003878:	6120      	str	r0, [r4, #16]
 800387a:	6163      	str	r3, [r4, #20]
 800387c:	9b01      	ldr	r3, [sp, #4]
 800387e:	b15b      	cbz	r3, 8003898 <__smakebuf_r+0x74>
 8003880:	4630      	mov	r0, r6
 8003882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003886:	f000 f971 	bl	8003b6c <_isatty_r>
 800388a:	b128      	cbz	r0, 8003898 <__smakebuf_r+0x74>
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	f023 0303 	bic.w	r3, r3, #3
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	81a3      	strh	r3, [r4, #12]
 8003898:	89a0      	ldrh	r0, [r4, #12]
 800389a:	4305      	orrs	r5, r0
 800389c:	81a5      	strh	r5, [r4, #12]
 800389e:	e7cd      	b.n	800383c <__smakebuf_r+0x18>
 80038a0:	08003631 	.word	0x08003631

080038a4 <_free_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4605      	mov	r5, r0
 80038a8:	2900      	cmp	r1, #0
 80038aa:	d040      	beq.n	800392e <_free_r+0x8a>
 80038ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038b0:	1f0c      	subs	r4, r1, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	bfb8      	it	lt
 80038b6:	18e4      	addlt	r4, r4, r3
 80038b8:	f000 f97a 	bl	8003bb0 <__malloc_lock>
 80038bc:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <_free_r+0x8c>)
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	b933      	cbnz	r3, 80038d0 <_free_r+0x2c>
 80038c2:	6063      	str	r3, [r4, #4]
 80038c4:	6014      	str	r4, [r2, #0]
 80038c6:	4628      	mov	r0, r5
 80038c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038cc:	f000 b976 	b.w	8003bbc <__malloc_unlock>
 80038d0:	42a3      	cmp	r3, r4
 80038d2:	d908      	bls.n	80038e6 <_free_r+0x42>
 80038d4:	6820      	ldr	r0, [r4, #0]
 80038d6:	1821      	adds	r1, r4, r0
 80038d8:	428b      	cmp	r3, r1
 80038da:	bf01      	itttt	eq
 80038dc:	6819      	ldreq	r1, [r3, #0]
 80038de:	685b      	ldreq	r3, [r3, #4]
 80038e0:	1809      	addeq	r1, r1, r0
 80038e2:	6021      	streq	r1, [r4, #0]
 80038e4:	e7ed      	b.n	80038c2 <_free_r+0x1e>
 80038e6:	461a      	mov	r2, r3
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b10b      	cbz	r3, 80038f0 <_free_r+0x4c>
 80038ec:	42a3      	cmp	r3, r4
 80038ee:	d9fa      	bls.n	80038e6 <_free_r+0x42>
 80038f0:	6811      	ldr	r1, [r2, #0]
 80038f2:	1850      	adds	r0, r2, r1
 80038f4:	42a0      	cmp	r0, r4
 80038f6:	d10b      	bne.n	8003910 <_free_r+0x6c>
 80038f8:	6820      	ldr	r0, [r4, #0]
 80038fa:	4401      	add	r1, r0
 80038fc:	1850      	adds	r0, r2, r1
 80038fe:	4283      	cmp	r3, r0
 8003900:	6011      	str	r1, [r2, #0]
 8003902:	d1e0      	bne.n	80038c6 <_free_r+0x22>
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4401      	add	r1, r0
 800390a:	6011      	str	r1, [r2, #0]
 800390c:	6053      	str	r3, [r2, #4]
 800390e:	e7da      	b.n	80038c6 <_free_r+0x22>
 8003910:	d902      	bls.n	8003918 <_free_r+0x74>
 8003912:	230c      	movs	r3, #12
 8003914:	602b      	str	r3, [r5, #0]
 8003916:	e7d6      	b.n	80038c6 <_free_r+0x22>
 8003918:	6820      	ldr	r0, [r4, #0]
 800391a:	1821      	adds	r1, r4, r0
 800391c:	428b      	cmp	r3, r1
 800391e:	bf01      	itttt	eq
 8003920:	6819      	ldreq	r1, [r3, #0]
 8003922:	685b      	ldreq	r3, [r3, #4]
 8003924:	1809      	addeq	r1, r1, r0
 8003926:	6021      	streq	r1, [r4, #0]
 8003928:	6063      	str	r3, [r4, #4]
 800392a:	6054      	str	r4, [r2, #4]
 800392c:	e7cb      	b.n	80038c6 <_free_r+0x22>
 800392e:	bd38      	pop	{r3, r4, r5, pc}
 8003930:	200002b4 	.word	0x200002b4

08003934 <sbrk_aligned>:
 8003934:	b570      	push	{r4, r5, r6, lr}
 8003936:	4e0e      	ldr	r6, [pc, #56]	; (8003970 <sbrk_aligned+0x3c>)
 8003938:	460c      	mov	r4, r1
 800393a:	6831      	ldr	r1, [r6, #0]
 800393c:	4605      	mov	r5, r0
 800393e:	b911      	cbnz	r1, 8003946 <sbrk_aligned+0x12>
 8003940:	f000 f88c 	bl	8003a5c <_sbrk_r>
 8003944:	6030      	str	r0, [r6, #0]
 8003946:	4621      	mov	r1, r4
 8003948:	4628      	mov	r0, r5
 800394a:	f000 f887 	bl	8003a5c <_sbrk_r>
 800394e:	1c43      	adds	r3, r0, #1
 8003950:	d00a      	beq.n	8003968 <sbrk_aligned+0x34>
 8003952:	1cc4      	adds	r4, r0, #3
 8003954:	f024 0403 	bic.w	r4, r4, #3
 8003958:	42a0      	cmp	r0, r4
 800395a:	d007      	beq.n	800396c <sbrk_aligned+0x38>
 800395c:	1a21      	subs	r1, r4, r0
 800395e:	4628      	mov	r0, r5
 8003960:	f000 f87c 	bl	8003a5c <_sbrk_r>
 8003964:	3001      	adds	r0, #1
 8003966:	d101      	bne.n	800396c <sbrk_aligned+0x38>
 8003968:	f04f 34ff 	mov.w	r4, #4294967295
 800396c:	4620      	mov	r0, r4
 800396e:	bd70      	pop	{r4, r5, r6, pc}
 8003970:	200002b8 	.word	0x200002b8

08003974 <_malloc_r>:
 8003974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003978:	1ccd      	adds	r5, r1, #3
 800397a:	f025 0503 	bic.w	r5, r5, #3
 800397e:	3508      	adds	r5, #8
 8003980:	2d0c      	cmp	r5, #12
 8003982:	bf38      	it	cc
 8003984:	250c      	movcc	r5, #12
 8003986:	2d00      	cmp	r5, #0
 8003988:	4607      	mov	r7, r0
 800398a:	db01      	blt.n	8003990 <_malloc_r+0x1c>
 800398c:	42a9      	cmp	r1, r5
 800398e:	d905      	bls.n	800399c <_malloc_r+0x28>
 8003990:	230c      	movs	r3, #12
 8003992:	2600      	movs	r6, #0
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	4630      	mov	r0, r6
 8003998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800399c:	4e2e      	ldr	r6, [pc, #184]	; (8003a58 <_malloc_r+0xe4>)
 800399e:	f000 f907 	bl	8003bb0 <__malloc_lock>
 80039a2:	6833      	ldr	r3, [r6, #0]
 80039a4:	461c      	mov	r4, r3
 80039a6:	bb34      	cbnz	r4, 80039f6 <_malloc_r+0x82>
 80039a8:	4629      	mov	r1, r5
 80039aa:	4638      	mov	r0, r7
 80039ac:	f7ff ffc2 	bl	8003934 <sbrk_aligned>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	4604      	mov	r4, r0
 80039b4:	d14d      	bne.n	8003a52 <_malloc_r+0xde>
 80039b6:	6834      	ldr	r4, [r6, #0]
 80039b8:	4626      	mov	r6, r4
 80039ba:	2e00      	cmp	r6, #0
 80039bc:	d140      	bne.n	8003a40 <_malloc_r+0xcc>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	4631      	mov	r1, r6
 80039c2:	4638      	mov	r0, r7
 80039c4:	eb04 0803 	add.w	r8, r4, r3
 80039c8:	f000 f848 	bl	8003a5c <_sbrk_r>
 80039cc:	4580      	cmp	r8, r0
 80039ce:	d13a      	bne.n	8003a46 <_malloc_r+0xd2>
 80039d0:	6821      	ldr	r1, [r4, #0]
 80039d2:	3503      	adds	r5, #3
 80039d4:	1a6d      	subs	r5, r5, r1
 80039d6:	f025 0503 	bic.w	r5, r5, #3
 80039da:	3508      	adds	r5, #8
 80039dc:	2d0c      	cmp	r5, #12
 80039de:	bf38      	it	cc
 80039e0:	250c      	movcc	r5, #12
 80039e2:	4638      	mov	r0, r7
 80039e4:	4629      	mov	r1, r5
 80039e6:	f7ff ffa5 	bl	8003934 <sbrk_aligned>
 80039ea:	3001      	adds	r0, #1
 80039ec:	d02b      	beq.n	8003a46 <_malloc_r+0xd2>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	442b      	add	r3, r5
 80039f2:	6023      	str	r3, [r4, #0]
 80039f4:	e00e      	b.n	8003a14 <_malloc_r+0xa0>
 80039f6:	6822      	ldr	r2, [r4, #0]
 80039f8:	1b52      	subs	r2, r2, r5
 80039fa:	d41e      	bmi.n	8003a3a <_malloc_r+0xc6>
 80039fc:	2a0b      	cmp	r2, #11
 80039fe:	d916      	bls.n	8003a2e <_malloc_r+0xba>
 8003a00:	1961      	adds	r1, r4, r5
 8003a02:	42a3      	cmp	r3, r4
 8003a04:	6025      	str	r5, [r4, #0]
 8003a06:	bf18      	it	ne
 8003a08:	6059      	strne	r1, [r3, #4]
 8003a0a:	6863      	ldr	r3, [r4, #4]
 8003a0c:	bf08      	it	eq
 8003a0e:	6031      	streq	r1, [r6, #0]
 8003a10:	5162      	str	r2, [r4, r5]
 8003a12:	604b      	str	r3, [r1, #4]
 8003a14:	4638      	mov	r0, r7
 8003a16:	f104 060b 	add.w	r6, r4, #11
 8003a1a:	f000 f8cf 	bl	8003bbc <__malloc_unlock>
 8003a1e:	f026 0607 	bic.w	r6, r6, #7
 8003a22:	1d23      	adds	r3, r4, #4
 8003a24:	1af2      	subs	r2, r6, r3
 8003a26:	d0b6      	beq.n	8003996 <_malloc_r+0x22>
 8003a28:	1b9b      	subs	r3, r3, r6
 8003a2a:	50a3      	str	r3, [r4, r2]
 8003a2c:	e7b3      	b.n	8003996 <_malloc_r+0x22>
 8003a2e:	6862      	ldr	r2, [r4, #4]
 8003a30:	42a3      	cmp	r3, r4
 8003a32:	bf0c      	ite	eq
 8003a34:	6032      	streq	r2, [r6, #0]
 8003a36:	605a      	strne	r2, [r3, #4]
 8003a38:	e7ec      	b.n	8003a14 <_malloc_r+0xa0>
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	6864      	ldr	r4, [r4, #4]
 8003a3e:	e7b2      	b.n	80039a6 <_malloc_r+0x32>
 8003a40:	4634      	mov	r4, r6
 8003a42:	6876      	ldr	r6, [r6, #4]
 8003a44:	e7b9      	b.n	80039ba <_malloc_r+0x46>
 8003a46:	230c      	movs	r3, #12
 8003a48:	4638      	mov	r0, r7
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	f000 f8b6 	bl	8003bbc <__malloc_unlock>
 8003a50:	e7a1      	b.n	8003996 <_malloc_r+0x22>
 8003a52:	6025      	str	r5, [r4, #0]
 8003a54:	e7de      	b.n	8003a14 <_malloc_r+0xa0>
 8003a56:	bf00      	nop
 8003a58:	200002b4 	.word	0x200002b4

08003a5c <_sbrk_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	2300      	movs	r3, #0
 8003a60:	4d05      	ldr	r5, [pc, #20]	; (8003a78 <_sbrk_r+0x1c>)
 8003a62:	4604      	mov	r4, r0
 8003a64:	4608      	mov	r0, r1
 8003a66:	602b      	str	r3, [r5, #0]
 8003a68:	f7fd ff86 	bl	8001978 <_sbrk>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	d102      	bne.n	8003a76 <_sbrk_r+0x1a>
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	b103      	cbz	r3, 8003a76 <_sbrk_r+0x1a>
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
 8003a78:	200002bc 	.word	0x200002bc

08003a7c <__sread>:
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	460c      	mov	r4, r1
 8003a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a84:	f000 f8a0 	bl	8003bc8 <_read_r>
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	bfab      	itete	ge
 8003a8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a8e:	89a3      	ldrhlt	r3, [r4, #12]
 8003a90:	181b      	addge	r3, r3, r0
 8003a92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a96:	bfac      	ite	ge
 8003a98:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a9a:	81a3      	strhlt	r3, [r4, #12]
 8003a9c:	bd10      	pop	{r4, pc}

08003a9e <__swrite>:
 8003a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa2:	461f      	mov	r7, r3
 8003aa4:	898b      	ldrh	r3, [r1, #12]
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	05db      	lsls	r3, r3, #23
 8003aaa:	460c      	mov	r4, r1
 8003aac:	4616      	mov	r6, r2
 8003aae:	d505      	bpl.n	8003abc <__swrite+0x1e>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ab8:	f000 f868 	bl	8003b8c <_lseek_r>
 8003abc:	89a3      	ldrh	r3, [r4, #12]
 8003abe:	4632      	mov	r2, r6
 8003ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ac4:	81a3      	strh	r3, [r4, #12]
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	463b      	mov	r3, r7
 8003aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad2:	f000 b817 	b.w	8003b04 <_write_r>

08003ad6 <__sseek>:
 8003ad6:	b510      	push	{r4, lr}
 8003ad8:	460c      	mov	r4, r1
 8003ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ade:	f000 f855 	bl	8003b8c <_lseek_r>
 8003ae2:	1c43      	adds	r3, r0, #1
 8003ae4:	89a3      	ldrh	r3, [r4, #12]
 8003ae6:	bf15      	itete	ne
 8003ae8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003aea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003aee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003af2:	81a3      	strheq	r3, [r4, #12]
 8003af4:	bf18      	it	ne
 8003af6:	81a3      	strhne	r3, [r4, #12]
 8003af8:	bd10      	pop	{r4, pc}

08003afa <__sclose>:
 8003afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003afe:	f000 b813 	b.w	8003b28 <_close_r>
	...

08003b04 <_write_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4604      	mov	r4, r0
 8003b08:	4608      	mov	r0, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	4d05      	ldr	r5, [pc, #20]	; (8003b24 <_write_r+0x20>)
 8003b10:	602a      	str	r2, [r5, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f7fd fee4 	bl	80018e0 <_write>
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d102      	bne.n	8003b22 <_write_r+0x1e>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	b103      	cbz	r3, 8003b22 <_write_r+0x1e>
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	bd38      	pop	{r3, r4, r5, pc}
 8003b24:	200002bc 	.word	0x200002bc

08003b28 <_close_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	4d05      	ldr	r5, [pc, #20]	; (8003b44 <_close_r+0x1c>)
 8003b2e:	4604      	mov	r4, r0
 8003b30:	4608      	mov	r0, r1
 8003b32:	602b      	str	r3, [r5, #0]
 8003b34:	f7fd fef0 	bl	8001918 <_close>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d102      	bne.n	8003b42 <_close_r+0x1a>
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	b103      	cbz	r3, 8003b42 <_close_r+0x1a>
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
 8003b44:	200002bc 	.word	0x200002bc

08003b48 <_fstat_r>:
 8003b48:	b538      	push	{r3, r4, r5, lr}
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	4d06      	ldr	r5, [pc, #24]	; (8003b68 <_fstat_r+0x20>)
 8003b4e:	4604      	mov	r4, r0
 8003b50:	4608      	mov	r0, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	602b      	str	r3, [r5, #0]
 8003b56:	f7fd feea 	bl	800192e <_fstat>
 8003b5a:	1c43      	adds	r3, r0, #1
 8003b5c:	d102      	bne.n	8003b64 <_fstat_r+0x1c>
 8003b5e:	682b      	ldr	r3, [r5, #0]
 8003b60:	b103      	cbz	r3, 8003b64 <_fstat_r+0x1c>
 8003b62:	6023      	str	r3, [r4, #0]
 8003b64:	bd38      	pop	{r3, r4, r5, pc}
 8003b66:	bf00      	nop
 8003b68:	200002bc 	.word	0x200002bc

08003b6c <_isatty_r>:
 8003b6c:	b538      	push	{r3, r4, r5, lr}
 8003b6e:	2300      	movs	r3, #0
 8003b70:	4d05      	ldr	r5, [pc, #20]	; (8003b88 <_isatty_r+0x1c>)
 8003b72:	4604      	mov	r4, r0
 8003b74:	4608      	mov	r0, r1
 8003b76:	602b      	str	r3, [r5, #0]
 8003b78:	f7fd fee8 	bl	800194c <_isatty>
 8003b7c:	1c43      	adds	r3, r0, #1
 8003b7e:	d102      	bne.n	8003b86 <_isatty_r+0x1a>
 8003b80:	682b      	ldr	r3, [r5, #0]
 8003b82:	b103      	cbz	r3, 8003b86 <_isatty_r+0x1a>
 8003b84:	6023      	str	r3, [r4, #0]
 8003b86:	bd38      	pop	{r3, r4, r5, pc}
 8003b88:	200002bc 	.word	0x200002bc

08003b8c <_lseek_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4604      	mov	r4, r0
 8003b90:	4608      	mov	r0, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	2200      	movs	r2, #0
 8003b96:	4d05      	ldr	r5, [pc, #20]	; (8003bac <_lseek_r+0x20>)
 8003b98:	602a      	str	r2, [r5, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f7fd fee0 	bl	8001960 <_lseek>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d102      	bne.n	8003baa <_lseek_r+0x1e>
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	b103      	cbz	r3, 8003baa <_lseek_r+0x1e>
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
 8003bac:	200002bc 	.word	0x200002bc

08003bb0 <__malloc_lock>:
 8003bb0:	4801      	ldr	r0, [pc, #4]	; (8003bb8 <__malloc_lock+0x8>)
 8003bb2:	f7ff be0f 	b.w	80037d4 <__retarget_lock_acquire_recursive>
 8003bb6:	bf00      	nop
 8003bb8:	200002b0 	.word	0x200002b0

08003bbc <__malloc_unlock>:
 8003bbc:	4801      	ldr	r0, [pc, #4]	; (8003bc4 <__malloc_unlock+0x8>)
 8003bbe:	f7ff be0a 	b.w	80037d6 <__retarget_lock_release_recursive>
 8003bc2:	bf00      	nop
 8003bc4:	200002b0 	.word	0x200002b0

08003bc8 <_read_r>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	4611      	mov	r1, r2
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	4d05      	ldr	r5, [pc, #20]	; (8003be8 <_read_r+0x20>)
 8003bd4:	602a      	str	r2, [r5, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f7fd fe65 	bl	80018a6 <_read>
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	d102      	bne.n	8003be6 <_read_r+0x1e>
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	b103      	cbz	r3, 8003be6 <_read_r+0x1e>
 8003be4:	6023      	str	r3, [r4, #0]
 8003be6:	bd38      	pop	{r3, r4, r5, pc}
 8003be8:	200002bc 	.word	0x200002bc

08003bec <_init>:
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	bf00      	nop
 8003bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf2:	bc08      	pop	{r3}
 8003bf4:	469e      	mov	lr, r3
 8003bf6:	4770      	bx	lr

08003bf8 <_fini>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	bf00      	nop
 8003bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfe:	bc08      	pop	{r3}
 8003c00:	469e      	mov	lr, r3
 8003c02:	4770      	bx	lr
